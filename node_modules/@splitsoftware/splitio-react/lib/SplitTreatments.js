"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var react_1 = __importDefault(require("react"));
var SplitContext_1 = __importDefault(require("./SplitContext"));
var constants_1 = require("./constants");
/**
 * SplitTreatments accepts a list of split names and optional attributes. It access the client at SplitContext to
 * call 'client.getTreatmentsWithConfig()' method, and passes the returned treatments to a child as a function.
 *
 * Since it is a PureComponent, it does a shallow comparison of props to determine if the component should update,
 * i.e., it uses reference identity for `names` and `attributes` props.
 *
 * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}
 */
var SplitTreatments = /** @class */ (function (_super) {
    __extends(SplitTreatments, _super);
    function SplitTreatments() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SplitTreatments.prototype.render = function () {
        var _this = this;
        var _a = this.props, names = _a.names, children = _a.children, attributes = _a.attributes;
        return (react_1["default"].createElement(SplitContext_1["default"].Consumer, null, function (_a) {
            var client = _a.client, isReady = _a.isReady, isTimedout = _a.isTimedout, lastUpdate = _a.lastUpdate;
            var treatments;
            if (!isReady || !client) {
                treatments = constants_1.getControlTreatmentsWithConfig(names);
                if (!client) {
                    _this.logWarning = true;
                }
            }
            else {
                treatments = client.getTreatmentsWithConfig(names, attributes);
            }
            return children({
                treatments: treatments, isReady: isReady, isTimedout: isTimedout, lastUpdate: lastUpdate
            });
        }));
    };
    SplitTreatments.prototype.componentDidMount = function () {
        if (this.logWarning) {
            console.log(constants_1.WARN_ST_NO_CLIENT);
        }
    };
    return SplitTreatments;
}(react_1["default"].PureComponent));
exports["default"] = SplitTreatments;
