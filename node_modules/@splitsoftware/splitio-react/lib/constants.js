"use strict";
exports.__esModule = true;
// The string below is a marker and will be replaced by the real version number. DO NOT CHANGE
exports.VERSION = 'react-' + '1.1.0';
// Treatments
exports.ON = 'on';
exports.OFF = 'off';
exports.CONTROL = 'control'; // SplitIO default value
exports.CONTROL_WITH_CONFIG = {
    treatment: 'control',
    config: null
};
exports.getControlTreatmentsWithConfig = function (splitNames) {
    return splitNames.reduce(function (pValue, cValue) {
        pValue[cValue] = exports.CONTROL_WITH_CONFIG;
        return pValue;
    }, {});
};
// Warning and error messages
exports.WARN_SF_CONFIG_AND_FACTORY = '[WARN] Both a config and factory props were provided to SplitFactory. Config prop will be ignored.';
exports.ERROR_SF_NO_CONFIG_AND_FACTORY = '[ERROR] SplitFactory must receive either a Split config or a Split factory as props.';
exports.ERROR_SC_NO_FACTORY = '[ERROR] SplitClient does not have access to a Split factory. This is because it is not inside the scope of a SplitFactory component or SplitFactory was not properly instantiated.';
exports.WARN_ST_NO_CLIENT = '[WARN] SplitTreatments does not have access to a Split client. This is because it is not inside the scope of a SplitFactory component or SplitFactory was not properly instantiated.';
