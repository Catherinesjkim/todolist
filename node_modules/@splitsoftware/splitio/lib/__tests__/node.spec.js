"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.regexp.constructor");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

require("regenerator-runtime/runtime");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _settings = _interopRequireDefault(require("../utils/settings"));

var _evaluations = _interopRequireDefault(require("./nodeSuites/evaluations.spec"));

var _events = _interopRequireDefault(require("./nodeSuites/events.spec"));

var _impressions = _interopRequireDefault(require("./nodeSuites/impressions.spec"));

var _metrics = _interopRequireDefault(require("./nodeSuites/metrics.spec"));

var _impressionsListener = _interopRequireDefault(require("./nodeSuites/impressions-listener.spec"));

var _expectedTreatments = _interopRequireDefault(require("./nodeSuites/expected-treatments.spec"));

var _manager = _interopRequireDefault(require("./nodeSuites/manager.spec"));

var _ipAddressesSetting = _interopRequireDefault(require("./nodeSuites/ip-addresses-setting.spec"));

var _transport = require("../services/transport");

var _splitchangesSince = _interopRequireDefault(require("./mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("./mocks/splitchanges.since.1457552620999.json"));

var settings = (0, _settings.default)({
  core: {
    authorizationKey: '<fake-token>'
  }
});
var config = {
  core: {
    authorizationKey: '<fake-token-1>'
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    // for now I don't want to publish metrics during E2E run.
    impressionsRefreshRate: 3000 // for now I don't want to publish impressions during E2E run.

  }
};
var key = 'facundo@split.io'; // Set the mock adapter on the current axios instance

var mock = new _axiosMockAdapter.default((0, _transport.__getAxiosInstance)());
mock.onGet(settings.url('/splitChanges?since=-1')).reply(200, _splitchangesSince.default);
mock.onGet(settings.url('/splitChanges?since=1457552620999')).reply(200, _splitchangesSince2.default);
mock.onGet(new RegExp("".concat(settings.url('/segmentChanges'), "/*"))).reply(200, {
  'name': 'segment',
  'added': [],
  'removed': [],
  'since': 1,
  'till': 1
});
(0, _tapeCatch.default)('## Node JS - E2E CI Tests ##',
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(assert) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            /* Check client evaluations. */
            assert.test('E2E / In Memory', (0, _bind.default)(_evaluations.default).call(_evaluations.default, null, config, key));
            /* Check impressions */

            assert.test('E2E / Impressions', (0, _bind.default)(_impressions.default).call(_impressions.default, null, key, mock));
            assert.test('E2E / Impressions listener', _impressionsListener.default);
            /* Check metrics */

            assert.test('E2E / Metrics', (0, _bind.default)(_metrics.default).call(_metrics.default, null, key, mock));
            /* Check events in memory */

            assert.test('E2E / Events', (0, _bind.default)(_events.default).call(_events.default, null, mock));
            /* Check that a treatment is the expected one for the key */

            assert.test('E2E / Expected Treatments by key', (0, _bind.default)(_expectedTreatments.default).call(_expectedTreatments.default, null, config, settings, mock));
            /* Manager basic tests */

            assert.test('E2E / Manager basics', (0, _bind.default)(_manager.default).call(_manager.default, null, settings, mock));
            /* Check IP address and Machine name headers when IP address setting is enabled and disabled */

            assert.test('E2E / IP Addresses Setting', (0, _bind.default)(_ipAddressesSetting.default).call(_ipAddressesSetting.default, null, mock));
            assert.end();

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());