"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

require("regenerator-runtime/runtime");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _create = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/create"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _client = _interopRequireDefault(require("../client"));

var _offline = _interopRequireDefault(require("../producer/offline"));

var _inputValidation = require("../utils/inputValidation");

//
// Create SDK instance for offline mode.
//
function SplitFactoryOffline(context, sharedTrackers) {
  var sharedInstance = !sharedTrackers;
  var readiness = context.get(context.constants.READINESS);
  var storage = context.get(context.constants.STORAGE);
  var statusManager = context.get(context.constants.STATUS_MANAGER); // Producer

  var producer = sharedInstance ? undefined : (0, _offline.default)(context); // Start background task for flag updates

  producer && producer.start();
  var api = (0, _assign.default)( // Proto linkage of the EventEmitter to prevent any change
  (0, _create.default)(statusManager), // GetTreatment/s
  (0, _client.default)(context), // Utilities
  {
    // Destroy instance. Async so we respect the online api.
    destroy: function () {
      var _destroy = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Stop background jobs
                producer && producer.stop(); // Cleanup event listeners

                readiness.destroy(); // Cleanup storage

                storage.destroy && storage.destroy(); // Mark the factory as destroyed.

                context.put(context.constants.DESTROYED, true);
                !sharedInstance && (0, _inputValidation.releaseApiKey)();

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function destroy() {
        return _destroy.apply(this, arguments);
      }

      return destroy;
    }()
  });
  return {
    api: api,
    metricCollectors: false // We won't collect any metrics on localhost mode.

  };
}

var _default = SplitFactoryOffline;
exports.default = _default;