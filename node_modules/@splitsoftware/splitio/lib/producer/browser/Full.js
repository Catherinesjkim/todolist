"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _task = _interopRequireDefault(require("../task"));

var _SplitChanges = _interopRequireDefault(require("../updater/SplitChanges"));

var _MySegments = _interopRequireDefault(require("../updater/MySegments"));

var _onSplitsArrivedFactory = _interopRequireDefault(require("./onSplitsArrivedFactory"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-producer:updater');
/**
 * Startup all the background jobs required for a Browser SDK instance.
 */

var FullBrowserProducer = function FullBrowserProducer(context) {
  var splitsUpdater = (0, _SplitChanges.default)(context);
  var segmentsUpdater = (0, _MySegments.default)(context);
  var settings = context.get(context.constants.SETTINGS);

  var _context$get = context.get(context.constants.READINESS),
      splitsEventEmitter = _context$get.splits;

  var splitsUpdaterTask = (0, _task.default)(splitsUpdater, settings.scheduler.featuresRefreshRate);
  var segmentsUpdaterTask = (0, _task.default)(segmentsUpdater, settings.scheduler.segmentsRefreshRate);
  var onSplitsArrived = (0, _onSplitsArrivedFactory.default)(segmentsUpdaterTask, context);
  splitsEventEmitter.on(splitsEventEmitter.SDK_SPLITS_ARRIVED, onSplitsArrived);
  return {
    start: function start() {
      log.info('Starting BROWSER producer');
      splitsUpdaterTask.start();
      segmentsUpdaterTask.start();
    },
    stop: function stop() {
      log.info('Stopping BROWSER producer');
      splitsUpdaterTask.stop();
      segmentsUpdaterTask && segmentsUpdaterTask.stop();
    }
  };
};

var _default = FullBrowserProducer;
exports.default = _default;