import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _spliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/splice";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import logFactory from '../utils/logger';
import thenable from '../utils/promise/thenable';
var log = logFactory('splitio-client:impressions-tracker');

function ImpressionsTrackerContext(context) {
  var collector = context.get(context.constants.STORAGE).impressions;
  var settings = context.get(context.constants.SETTINGS);
  var listener = settings.impressionListener;
  var _settings$runtime = settings.runtime,
      ip = _settings$runtime.ip,
      hostname = _settings$runtime.hostname;
  var sdkLanguageVersion = settings.version;
  var _queue = [];
  return {
    queue: function queue(impression, attributes) {
      _queue.push({
        impression: impression,
        attributes: attributes
      });
    },
    track: function track() {
      var impressionsCount = _queue.length;

      var slice = _spliceInstanceProperty(_queue).call(_queue, 0, impressionsCount);

      var res = collector.track(_mapInstanceProperty(slice).call(slice, function (_ref) {
        var impression = _ref.impression;
        return impression;
      })); // If we're on an async storage, handle error and log it.

      if (thenable(res)) {
        res.then(function () {
          var _context;

          log.debug(_concatInstanceProperty(_context = "Successfully stored ".concat(impressionsCount, " impression")).call(_context, impressionsCount === 1 ? '' : 's', "."));
        })["catch"](function (err) {
          var _context2, _context3;

          log.error(_concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "Could not store impressions bulk with ".concat(impressionsCount, " impression")).call(_context3, impressionsCount === 1 ? '' : 's', ". Error: ")).call(_context2, err));
        });
      } // Wrap in a timeout because we don't want it to be blocking.


      var _loop = function _loop(i) {
        listener && _setTimeout(function () {
          try {
            // An exception on the listener should not break the SDK.
            listener.logImpression({
              impression: slice[i].impression,
              attributes: slice[i].attributes,
              ip: ip,
              hostname: hostname,
              sdkLanguageVersion: sdkLanguageVersion
            });
          } catch (err) {
            log.error("Impression listener logImpression method threw: ".concat(err, "."));
          }
        }, 0);
      };

      for (var i = 0; i < impressionsCount; i++) {
        _loop(i);
      }
    }
  };
}

export default ImpressionsTrackerContext;