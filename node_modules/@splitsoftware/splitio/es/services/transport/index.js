import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import axios from 'axios';
import { SplitNetworkError } from '../../utils/lang/Errors';
import logFactory from '../../utils/logger';
var log = logFactory('splitio-services:service');

var _axiosInstance = axios.create();

export default function Fetcher(request) {
  return _axiosInstance.request(request)["catch"](function (error) {
    var _context, _context2;

    var resp = error.response;
    var url = error.config ? error.config.url : 'unknown';
    var msg = '';

    if (resp) {
      // An HTTP error
      switch (resp.status) {
        case 404:
          msg = 'Invalid API key or resource not found.';
          break;

        default:
          msg = resp.statusText;
          break;
      }
    } else {
      // Something else, either an error making the request or a Network error.
      msg = error.message;
    }

    if (!resp || resp.status !== 403) // 403's log we'll be handled somewhere else.
      log.error(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "Response status is not OK. Status: ".concat(resp ? resp.status : 'NO_STATUS', ". URL: ")).call(_context2, url, ". Message: ")).call(_context, msg));
    throw new SplitNetworkError(msg, resp ? resp.status : 'NO_STATUS');
  });
} // This function is only exposed for unit testing purposses.

export function __getAxiosInstance() {
  return _axiosInstance;
}