{"ast":null,"code":"import { SplitFactory as SplitSDK } from '@splitsoftware/splitio';\nimport React from 'react';\nimport SplitContext from './SplitContext';\nimport { VERSION, WARN_SF_CONFIG_AND_FACTORY, ERROR_SF_NO_CONFIG_AND_FACTORY } from './constants';\nimport { getClientWithStatus } from './utils';\n/**\n * SplitFactory will initialize the Split SDK and listen for its events in order to update the Split Context.\n * SplitFactory must wrap other components and functions from this library, since they access the Split Context\n * and its elements (factory, clients, etc).\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK}\n */\n\nclass SplitFactory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sdkUpdate = () => {\n      this.setState({\n        lastUpdate: Date.now()\n      });\n    }; // Log warning and error\n\n\n    const {\n      factory: propFactory,\n      config,\n      updateOnSdkReady,\n      updateOnSdkTimedout,\n      updateOnSdkUpdate\n    } = props;\n\n    if (!config && !propFactory) {\n      console.error(ERROR_SF_NO_CONFIG_AND_FACTORY);\n    }\n\n    if (config && propFactory) {\n      console.log(WARN_SF_CONFIG_AND_FACTORY);\n    } // Instantiate factory and main client.\n\n\n    const factory = propFactory || (config ? SplitSDK(config) : null); // Don't try this at home. Only override the version when we create our own factory.\n\n    if (config && factory) {\n      factory.settings.version = VERSION;\n    }\n\n    const client = factory ? getClientWithStatus(factory) : null;\n\n    if (client) {\n      this.subscribeToEvents(client, updateOnSdkUpdate, updateOnSdkTimedout, updateOnSdkReady);\n    }\n\n    this.state = {\n      client,\n      factory,\n      isReady: client ? client.isReady : false,\n      isTimedout: client ? client.isTimedout : false,\n      lastUpdate: 0\n    };\n  } // Listen SDK events. This method will be updated when SDK provides self synchronous status\n\n\n  subscribeToEvents(client, updateOnSdkUpdate, updateOnSdkTimedout, updateOnSdkReady) {\n    if (!client.isReady) {\n      // client is not ready\n\n      /**\n       * client still might be ready if it was created before using `getClientWithStatus` function\n       * (for example if the client was instantiated outside SplitClient),\n       * thus we have to use the ready() promise instead of an event listener.\n       */\n      client.ready().then(() => {\n        // Update isReady if the client was not changed and updateOnSdkReady is true\n        if (this.state.client === client && updateOnSdkReady) {\n          this.setState({\n            isReady: true,\n            isTimedout: false,\n            lastUpdate: Date.now()\n          });\n        }\n      }, () => {\n        // Update isTimedout if the client was not changed and updateOnSdkTimedout is true\n        if (this.state.client === client) {\n          if (updateOnSdkTimedout) {\n            this.setState({\n              isTimedout: true,\n              lastUpdate: Date.now()\n            });\n          } // register a listener for SDK_READY event, that might trigger after a timeout\n\n\n          client.once(client.Event.SDK_READY, () => {\n            // Update isReady if the client was not changed and updateOnSdkReady is true\n            if (this.state.client === client && updateOnSdkReady) {\n              this.setState({\n                isReady: true,\n                isTimedout: false,\n                lastUpdate: Date.now()\n              });\n            }\n          });\n        }\n      });\n    } // register a listener for SDK_UPDATE event\n\n\n    if (updateOnSdkUpdate) {\n      client.on(client.Event.SDK_UPDATE, this.sdkUpdate);\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      factory,\n      isReady,\n      isTimedout,\n      lastUpdate\n    } = this.state;\n    return React.createElement(SplitContext.Provider, {\n      value: this.state\n    }, typeof children === 'function' ? children({\n      factory,\n      isReady,\n      isTimedout,\n      lastUpdate\n    }) : this.props.children);\n  }\n\n}\n\nSplitFactory.defaultProps = {\n  updateOnSdkUpdate: false,\n  updateOnSdkTimedout: false,\n  updateOnSdkReady: true,\n  children: null\n};\nexport default SplitFactory;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio-react/es/SplitFactory.js"],"names":["SplitFactory","SplitSDK","React","SplitContext","VERSION","WARN_SF_CONFIG_AND_FACTORY","ERROR_SF_NO_CONFIG_AND_FACTORY","getClientWithStatus","Component","constructor","props","sdkUpdate","setState","lastUpdate","Date","now","factory","propFactory","config","updateOnSdkReady","updateOnSdkTimedout","updateOnSdkUpdate","console","error","log","settings","version","client","subscribeToEvents","state","isReady","isTimedout","ready","then","once","Event","SDK_READY","on","SDK_UPDATE","render","children","createElement","Provider","value","defaultProps"],"mappings":"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","sourcesContent":["import { SplitFactory as SplitSDK } from '@splitsoftware/splitio';\nimport React from 'react';\nimport SplitContext from './SplitContext';\nimport { VERSION, WARN_SF_CONFIG_AND_FACTORY, ERROR_SF_NO_CONFIG_AND_FACTORY } from './constants';\nimport { getClientWithStatus } from './utils';\n/**\n * SplitFactory will initialize the Split SDK and listen for its events in order to update the Split Context.\n * SplitFactory must wrap other components and functions from this library, since they access the Split Context\n * and its elements (factory, clients, etc).\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK}\n */\nclass SplitFactory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.sdkUpdate = () => {\n            this.setState({ lastUpdate: Date.now() });\n        };\n        // Log warning and error\n        const { factory: propFactory, config, updateOnSdkReady, updateOnSdkTimedout, updateOnSdkUpdate } = props;\n        if (!config && !propFactory) {\n            console.error(ERROR_SF_NO_CONFIG_AND_FACTORY);\n        }\n        if (config && propFactory) {\n            console.log(WARN_SF_CONFIG_AND_FACTORY);\n        }\n        // Instantiate factory and main client.\n        const factory = propFactory || (config ? SplitSDK(config) : null);\n        // Don't try this at home. Only override the version when we create our own factory.\n        if (config && factory) {\n            factory.settings.version = VERSION;\n        }\n        const client = factory ? getClientWithStatus(factory) : null;\n        if (client) {\n            this.subscribeToEvents(client, updateOnSdkUpdate, updateOnSdkTimedout, updateOnSdkReady);\n        }\n        this.state = {\n            client,\n            factory,\n            isReady: client ? client.isReady : false,\n            isTimedout: client ? client.isTimedout : false,\n            lastUpdate: 0,\n        };\n    }\n    // Listen SDK events. This method will be updated when SDK provides self synchronous status\n    subscribeToEvents(client, updateOnSdkUpdate, updateOnSdkTimedout, updateOnSdkReady) {\n        if (!client.isReady) { // client is not ready\n            /**\n             * client still might be ready if it was created before using `getClientWithStatus` function\n             * (for example if the client was instantiated outside SplitClient),\n             * thus we have to use the ready() promise instead of an event listener.\n             */\n            client.ready().then(() => {\n                // Update isReady if the client was not changed and updateOnSdkReady is true\n                if (this.state.client === client && updateOnSdkReady) {\n                    this.setState({ isReady: true, isTimedout: false, lastUpdate: Date.now() });\n                }\n            }, () => {\n                // Update isTimedout if the client was not changed and updateOnSdkTimedout is true\n                if (this.state.client === client) {\n                    if (updateOnSdkTimedout) {\n                        this.setState({ isTimedout: true, lastUpdate: Date.now() });\n                    }\n                    // register a listener for SDK_READY event, that might trigger after a timeout\n                    client.once(client.Event.SDK_READY, () => {\n                        // Update isReady if the client was not changed and updateOnSdkReady is true\n                        if (this.state.client === client && updateOnSdkReady) {\n                            this.setState({ isReady: true, isTimedout: false, lastUpdate: Date.now() });\n                        }\n                    });\n                }\n            });\n        }\n        // register a listener for SDK_UPDATE event\n        if (updateOnSdkUpdate) {\n            client.on(client.Event.SDK_UPDATE, this.sdkUpdate);\n        }\n    }\n    render() {\n        const { children } = this.props;\n        const { factory, isReady, isTimedout, lastUpdate } = this.state;\n        return (React.createElement(SplitContext.Provider, { value: this.state }, typeof children === 'function' ?\n            children({ factory, isReady, isTimedout, lastUpdate }) :\n            this.props.children));\n    }\n}\nSplitFactory.defaultProps = {\n    updateOnSdkUpdate: false,\n    updateOnSdkTimedout: false,\n    updateOnSdkReady: true,\n    children: null,\n};\nexport default SplitFactory;\n"]},"metadata":{},"sourceType":"module"}