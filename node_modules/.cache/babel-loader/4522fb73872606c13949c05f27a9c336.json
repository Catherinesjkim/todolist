{"ast":null,"code":"import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport logFactory from '../utils/logger';\nimport thenable from '../utils/promise/thenable';\nvar log = logFactory('splitio-client:impressions-tracker');\n\nfunction ImpressionsTrackerContext(context) {\n  var collector = context.get(context.constants.STORAGE).impressions;\n  var settings = context.get(context.constants.SETTINGS);\n  var listener = settings.impressionListener;\n  var _settings$runtime = settings.runtime,\n      ip = _settings$runtime.ip,\n      hostname = _settings$runtime.hostname;\n  var sdkLanguageVersion = settings.version;\n  var _queue = [];\n  return {\n    queue: function queue(impression, attributes) {\n      _queue.push({\n        impression: impression,\n        attributes: attributes\n      });\n    },\n    track: function track() {\n      var impressionsCount = _queue.length;\n\n      var slice = _spliceInstanceProperty(_queue).call(_queue, 0, impressionsCount);\n\n      var res = collector.track(_mapInstanceProperty(slice).call(slice, function (_ref) {\n        var impression = _ref.impression;\n        return impression;\n      })); // If we're on an async storage, handle error and log it.\n\n      if (thenable(res)) {\n        res.then(function () {\n          var _context;\n\n          log.debug(_concatInstanceProperty(_context = \"Successfully stored \".concat(impressionsCount, \" impression\")).call(_context, impressionsCount === 1 ? '' : 's', \".\"));\n        })[\"catch\"](function (err) {\n          var _context2, _context3;\n\n          log.error(_concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = \"Could not store impressions bulk with \".concat(impressionsCount, \" impression\")).call(_context3, impressionsCount === 1 ? '' : 's', \". Error: \")).call(_context2, err));\n        });\n      } // Wrap in a timeout because we don't want it to be blocking.\n\n\n      var _loop = function _loop(i) {\n        listener && _setTimeout(function () {\n          try {\n            // An exception on the listener should not break the SDK.\n            listener.logImpression({\n              impression: slice[i].impression,\n              attributes: slice[i].attributes,\n              ip: ip,\n              hostname: hostname,\n              sdkLanguageVersion: sdkLanguageVersion\n            });\n          } catch (err) {\n            log.error(\"Impression listener logImpression method threw: \".concat(err, \".\"));\n          }\n        }, 0);\n      };\n\n      for (var i = 0; i < impressionsCount; i++) {\n        _loop(i);\n      }\n    }\n  };\n}\n\nexport default ImpressionsTrackerContext;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/trackers/impressions.js"],"names":["_setTimeout","_concatInstanceProperty","_mapInstanceProperty","_spliceInstanceProperty","logFactory","thenable","log","ImpressionsTrackerContext","context","collector","get","constants","STORAGE","impressions","settings","SETTINGS","listener","impressionListener","_settings$runtime","runtime","ip","hostname","sdkLanguageVersion","version","_queue","queue","impression","attributes","push","track","impressionsCount","length","slice","call","res","_ref","then","_context","debug","concat","err","_context2","_context3","error","_loop","i","logImpression"],"mappings":"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","sourcesContent":["import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport thenable from '../utils/promise/thenable';\nvar log = logFactory('splitio-client:impressions-tracker');\n\nfunction ImpressionsTrackerContext(context) {\n  var collector = context.get(context.constants.STORAGE).impressions;\n  var settings = context.get(context.constants.SETTINGS);\n  var listener = settings.impressionListener;\n  var _settings$runtime = settings.runtime,\n      ip = _settings$runtime.ip,\n      hostname = _settings$runtime.hostname;\n  var sdkLanguageVersion = settings.version;\n  var _queue = [];\n  return {\n    queue: function queue(impression, attributes) {\n      _queue.push({\n        impression: impression,\n        attributes: attributes\n      });\n    },\n    track: function track() {\n      var impressionsCount = _queue.length;\n\n      var slice = _spliceInstanceProperty(_queue).call(_queue, 0, impressionsCount);\n\n      var res = collector.track(_mapInstanceProperty(slice).call(slice, function (_ref) {\n        var impression = _ref.impression;\n        return impression;\n      })); // If we're on an async storage, handle error and log it.\n\n      if (thenable(res)) {\n        res.then(function () {\n          var _context;\n\n          log.debug(_concatInstanceProperty(_context = \"Successfully stored \".concat(impressionsCount, \" impression\")).call(_context, impressionsCount === 1 ? '' : 's', \".\"));\n        })[\"catch\"](function (err) {\n          var _context2, _context3;\n\n          log.error(_concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = \"Could not store impressions bulk with \".concat(impressionsCount, \" impression\")).call(_context3, impressionsCount === 1 ? '' : 's', \". Error: \")).call(_context2, err));\n        });\n      } // Wrap in a timeout because we don't want it to be blocking.\n\n\n      var _loop = function _loop(i) {\n        listener && _setTimeout(function () {\n          try {\n            // An exception on the listener should not break the SDK.\n            listener.logImpression({\n              impression: slice[i].impression,\n              attributes: slice[i].attributes,\n              ip: ip,\n              hostname: hostname,\n              sdkLanguageVersion: sdkLanguageVersion\n            });\n          } catch (err) {\n            log.error(\"Impression listener logImpression method threw: \".concat(err, \".\"));\n          }\n        }, 0);\n      };\n\n      for (var i = 0; i < impressionsCount; i++) {\n        _loop(i);\n      }\n    }\n  };\n}\n\nexport default ImpressionsTrackerContext;"]},"metadata":{},"sourceType":"module"}