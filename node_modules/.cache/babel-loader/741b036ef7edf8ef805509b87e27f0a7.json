{"ast":null,"code":"import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\nimport _typeof from \"@babel/runtime-corejs3/helpers/esm/typeof\";\nimport _Number$isFinite from \"@babel/runtime-corejs3/core-js-stable/number/is-finite\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";\n/**\n * Checks if the target string starts with the sub string.\n */\n\nexport function startsWith(target, sub) {\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  return _sliceInstanceProperty(target).call(target, 0, sub.length) === sub;\n}\n/**\n * Checks if the target string ends with the sub string.\n */\n\nexport function endsWith(target, sub) {\n  var caseInsensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  if (caseInsensitive) {\n    target = target.toLowerCase();\n    sub = sub.toLowerCase();\n  }\n\n  return _sliceInstanceProperty(target).call(target, target.length - sub.length) === sub;\n}\n/**\n * Safely retrieve the specified prop from obj. If we can't retrieve\n * that property value, we return the default value.\n */\n\nexport function get(obj, prop, val) {\n  var res = val;\n\n  try {\n    // No risks nor lots of checks.\n    var pathPieces = prop.split('.');\n    var partial = obj;\n\n    _forEachInstanceProperty(pathPieces).call(pathPieces, function (pathPiece) {\n      return partial = partial[pathPiece];\n    });\n\n    if (typeof partial !== 'undefined') res = partial;\n  } catch (e) {// noop\n  }\n\n  return res;\n}\n/**\n * Evaluates iteratee for each element of the source array. Returns the index of the first element\n * for which iteratee returns truthy. If no element is found or there's an issue with the params it returns -1.\n */\n\nexport function findIndex(source, iteratee) {\n  if (_Array$isArray(source) && typeof iteratee === 'function') {\n    for (var i = 0; i < source.length; i++) {\n      if (iteratee(source[i], i, source) === true) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * Loops through a source collection (an object or an array) running iteratee\n * against each element. It returns the first element for which iteratee returned\n * a truthy value and stops the loop.\n * Iteratee receives three arguments (element, key/index, collection)\n */\n\nexport function find(source, iteratee) {\n  var res;\n\n  if (isObject(source)) {\n    var keys = _Object$keys(source);\n\n    for (var i = 0; i < keys.length && !res; i++) {\n      var key = keys[i];\n      var iterateeResult = iteratee(source[key], key, source);\n      if (iterateeResult) res = source[key];\n    }\n  } else if (_Array$isArray(source)) {\n    for (var _i = 0; _i < source.length && !res; _i++) {\n      var _iterateeResult = iteratee(source[_i], _i, source);\n\n      if (_iterateeResult) res = source[_i];\n    }\n  }\n\n  return res;\n}\n/**\n * Checks if a given value is a string.\n */\n\nexport function isString(val) {\n  return typeof val === 'string' || val instanceof String;\n}\n/**\n * Checks if a given value is a finite number.\n */\n\nexport function isFinite(val) {\n  if (typeof val === 'number') return _Number$isFinite(val);\n  if (val instanceof Number) return _Number$isFinite(val.valueOf());\n  return false;\n}\nvar uniqueIdCounter = -1;\n/**\n * Returns a number to be used as ID, which will be unique.\n */\n\nexport function uniqueId() {\n  return uniqueIdCounter++;\n}\n/**\n * Validates if a value is an object.\n */\n\nexport function isObject(obj) {\n  return obj && _typeof(obj) === 'object' && obj.constructor === Object;\n}\n/**\n * There are some assumptions here. It's for internal use and we don't need verbose errors\n * or to ensure the data types or whatever. Parameters should always be correct (at least have a target and a source, of type object).\n */\n\nexport function merge(target, source) {\n  var _context;\n\n  var res = target;\n  isObject(source) && _forEachInstanceProperty(_context = _Object$keys(source)).call(_context, function (key) {\n    var val = source[key];\n\n    if (isObject(val)) {\n      if (res[key] && isObject(res[key])) {\n        // If both are objects, merge into a new one.\n        val = merge({}, res[key], val);\n      } else {\n        // else make a copy.\n        val = merge({}, val);\n      }\n    } // We skip undefined values.\n\n\n    if (val !== undefined) res[key] = val;\n  });\n\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  if (rest && rest.length) {\n    var _context2;\n\n    var nextSource = _spliceInstanceProperty(rest).call(rest, 0, 1)[0];\n\n    res = merge.apply(void 0, _concatInstanceProperty(_context2 = [res, nextSource]).call(_context2, rest));\n  }\n\n  return res;\n}\n/**\n * Removes duplicate items on an array of strings.\n */\n\nexport function uniq(arr) {\n  var seen = {};\n  return _filterInstanceProperty(arr).call(arr, function (item) {\n    return Object.prototype.hasOwnProperty.call(seen, item) ? false : seen[item] = true;\n  });\n}\n/**\n * Transforms a value into it's string representation.\n */\n\nexport function toString(val) {\n  if (val == null) return '';\n  if (typeof val === 'string') return val;\n  if (_Array$isArray(val)) return _mapInstanceProperty(val).call(val, function (val) {\n    return isString(val) ? val : '';\n  }) + '';\n  var result = val + '';\n  return result === '0' && 1 / val === Number.NEGATIVE_INFINITY ? '-0' : result;\n}\n/**\n * Transforms a value into a number.\n * Note: We're not expecting anything fancy here. If we are at some point, add more type checks.\n */\n\nexport function toNumber(val) {\n  if (typeof val === 'number') return val;\n\n  if (isObject(val) && typeof val.valueOf === 'function') {\n    var valOf = val.valueOf();\n    val = isObject(valOf) ? valOf + '' : valOf;\n  }\n\n  if (typeof val !== 'string') {\n    return val === 0 ? val : +val;\n  } // Remove trailing whitespaces.\n\n\n  val = val.replace(/^\\s+|\\s+$/g, '');\n  return +val;\n}\n/**\n * Executes iteratee for given obj own props.\n */\n\nexport function forOwn(obj, iteratee) {\n  var keys = _Object$keys(obj);\n\n  _forEachInstanceProperty(keys).call(keys, function (key) {\n    return iteratee(obj[key], key, obj);\n  });\n\n  return obj;\n}\n/**\n * Parses an array into a map of different arrays, grouping by the specified prop value.\n */\n\nexport function groupBy(source, prop) {\n  var map = {};\n\n  if (_Array$isArray(source) && isString(prop)) {\n    for (var i = 0; i < source.length; i++) {\n      var key = source[i][prop]; // Skip the element if the key is not a string.\n\n      if (isString(key)) {\n        if (!map[key]) map[key] = [];\n        map[key].push(source[i]);\n      }\n    }\n  }\n\n  return map;\n}\n/**\n * Returns the name of a given function.\n */\n\nexport function getFnName(fn) {\n  if (fn.name) return fn.name;\n  return (fn.toString().match(/function (.+?)\\(/) || ['', ''])[1];\n}\n/**\n * Shallow clone an object\n */\n\nexport function shallowClone(obj) {\n  var keys = _Object$keys(obj);\n\n  var output = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    output[keys[i]] = obj[keys[i]];\n  }\n\n  return output;\n}\nexport function isBoolean(val) {\n  return val === true || val === false;\n}","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/utils/lang/index.js"],"names":["_mapInstanceProperty","_filterInstanceProperty","_concatInstanceProperty","_spliceInstanceProperty","_typeof","_Number$isFinite","_Object$keys","_Array$isArray","_forEachInstanceProperty","_sliceInstanceProperty","startsWith","target","sub","isString","call","length","endsWith","caseInsensitive","arguments","undefined","toLowerCase","get","obj","prop","val","res","pathPieces","split","partial","pathPiece","e","findIndex","source","iteratee","i","find","isObject","keys","key","iterateeResult","_i","_iterateeResult","String","isFinite","Number","valueOf","uniqueIdCounter","uniqueId","constructor","Object","merge","_context","_len","rest","Array","_key","_context2","nextSource","apply","uniq","arr","seen","item","prototype","hasOwnProperty","toString","result","NEGATIVE_INFINITY","toNumber","valOf","replace","forOwn","groupBy","map","push","getFnName","fn","name","match","shallowClone","output","isBoolean"],"mappings":"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","sourcesContent":["import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\nimport _typeof from \"@babel/runtime-corejs3/helpers/esm/typeof\";\nimport _Number$isFinite from \"@babel/runtime-corejs3/core-js-stable/number/is-finite\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";\n\n/**\n * Checks if the target string starts with the sub string.\n */\nexport function startsWith(target, sub) {\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  return _sliceInstanceProperty(target).call(target, 0, sub.length) === sub;\n}\n/**\n * Checks if the target string ends with the sub string.\n */\n\nexport function endsWith(target, sub) {\n  var caseInsensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!(isString(target) && isString(sub))) {\n    return false;\n  }\n\n  if (caseInsensitive) {\n    target = target.toLowerCase();\n    sub = sub.toLowerCase();\n  }\n\n  return _sliceInstanceProperty(target).call(target, target.length - sub.length) === sub;\n}\n/**\n * Safely retrieve the specified prop from obj. If we can't retrieve\n * that property value, we return the default value.\n */\n\nexport function get(obj, prop, val) {\n  var res = val;\n\n  try {\n    // No risks nor lots of checks.\n    var pathPieces = prop.split('.');\n    var partial = obj;\n\n    _forEachInstanceProperty(pathPieces).call(pathPieces, function (pathPiece) {\n      return partial = partial[pathPiece];\n    });\n\n    if (typeof partial !== 'undefined') res = partial;\n  } catch (e) {// noop\n  }\n\n  return res;\n}\n/**\n * Evaluates iteratee for each element of the source array. Returns the index of the first element\n * for which iteratee returns truthy. If no element is found or there's an issue with the params it returns -1.\n */\n\nexport function findIndex(source, iteratee) {\n  if (_Array$isArray(source) && typeof iteratee === 'function') {\n    for (var i = 0; i < source.length; i++) {\n      if (iteratee(source[i], i, source) === true) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * Loops through a source collection (an object or an array) running iteratee\n * against each element. It returns the first element for which iteratee returned\n * a truthy value and stops the loop.\n * Iteratee receives three arguments (element, key/index, collection)\n */\n\nexport function find(source, iteratee) {\n  var res;\n\n  if (isObject(source)) {\n    var keys = _Object$keys(source);\n\n    for (var i = 0; i < keys.length && !res; i++) {\n      var key = keys[i];\n      var iterateeResult = iteratee(source[key], key, source);\n      if (iterateeResult) res = source[key];\n    }\n  } else if (_Array$isArray(source)) {\n    for (var _i = 0; _i < source.length && !res; _i++) {\n      var _iterateeResult = iteratee(source[_i], _i, source);\n\n      if (_iterateeResult) res = source[_i];\n    }\n  }\n\n  return res;\n}\n/**\n * Checks if a given value is a string.\n */\n\nexport function isString(val) {\n  return typeof val === 'string' || val instanceof String;\n}\n/**\n * Checks if a given value is a finite number.\n */\n\nexport function isFinite(val) {\n  if (typeof val === 'number') return _Number$isFinite(val);\n  if (val instanceof Number) return _Number$isFinite(val.valueOf());\n  return false;\n}\nvar uniqueIdCounter = -1;\n/**\n * Returns a number to be used as ID, which will be unique.\n */\n\nexport function uniqueId() {\n  return uniqueIdCounter++;\n}\n/**\n * Validates if a value is an object.\n */\n\nexport function isObject(obj) {\n  return obj && _typeof(obj) === 'object' && obj.constructor === Object;\n}\n/**\n * There are some assumptions here. It's for internal use and we don't need verbose errors\n * or to ensure the data types or whatever. Parameters should always be correct (at least have a target and a source, of type object).\n */\n\nexport function merge(target, source) {\n  var _context;\n\n  var res = target;\n  isObject(source) && _forEachInstanceProperty(_context = _Object$keys(source)).call(_context, function (key) {\n    var val = source[key];\n\n    if (isObject(val)) {\n      if (res[key] && isObject(res[key])) {\n        // If both are objects, merge into a new one.\n        val = merge({}, res[key], val);\n      } else {\n        // else make a copy.\n        val = merge({}, val);\n      }\n    } // We skip undefined values.\n\n\n    if (val !== undefined) res[key] = val;\n  });\n\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  if (rest && rest.length) {\n    var _context2;\n\n    var nextSource = _spliceInstanceProperty(rest).call(rest, 0, 1)[0];\n\n    res = merge.apply(void 0, _concatInstanceProperty(_context2 = [res, nextSource]).call(_context2, rest));\n  }\n\n  return res;\n}\n/**\n * Removes duplicate items on an array of strings.\n */\n\nexport function uniq(arr) {\n  var seen = {};\n  return _filterInstanceProperty(arr).call(arr, function (item) {\n    return Object.prototype.hasOwnProperty.call(seen, item) ? false : seen[item] = true;\n  });\n}\n/**\n * Transforms a value into it's string representation.\n */\n\nexport function toString(val) {\n  if (val == null) return '';\n  if (typeof val === 'string') return val;\n  if (_Array$isArray(val)) return _mapInstanceProperty(val).call(val, function (val) {\n    return isString(val) ? val : '';\n  }) + '';\n  var result = val + '';\n  return result === '0' && 1 / val === Number.NEGATIVE_INFINITY ? '-0' : result;\n}\n/**\n * Transforms a value into a number.\n * Note: We're not expecting anything fancy here. If we are at some point, add more type checks.\n */\n\nexport function toNumber(val) {\n  if (typeof val === 'number') return val;\n\n  if (isObject(val) && typeof val.valueOf === 'function') {\n    var valOf = val.valueOf();\n    val = isObject(valOf) ? valOf + '' : valOf;\n  }\n\n  if (typeof val !== 'string') {\n    return val === 0 ? val : +val;\n  } // Remove trailing whitespaces.\n\n\n  val = val.replace(/^\\s+|\\s+$/g, '');\n  return +val;\n}\n/**\n * Executes iteratee for given obj own props.\n */\n\nexport function forOwn(obj, iteratee) {\n  var keys = _Object$keys(obj);\n\n  _forEachInstanceProperty(keys).call(keys, function (key) {\n    return iteratee(obj[key], key, obj);\n  });\n\n  return obj;\n}\n/**\n * Parses an array into a map of different arrays, grouping by the specified prop value.\n */\n\nexport function groupBy(source, prop) {\n  var map = {};\n\n  if (_Array$isArray(source) && isString(prop)) {\n    for (var i = 0; i < source.length; i++) {\n      var key = source[i][prop]; // Skip the element if the key is not a string.\n\n      if (isString(key)) {\n        if (!map[key]) map[key] = [];\n        map[key].push(source[i]);\n      }\n    }\n  }\n\n  return map;\n}\n/**\n * Returns the name of a given function.\n */\n\nexport function getFnName(fn) {\n  if (fn.name) return fn.name;\n  return (fn.toString().match(/function (.+?)\\(/) || ['', ''])[1];\n}\n/**\n * Shallow clone an object\n */\n\nexport function shallowClone(obj) {\n  var keys = _Object$keys(obj);\n\n  var output = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    output[keys[i]] = obj[keys[i]];\n  }\n\n  return output;\n}\nexport function isBoolean(val) {\n  return val === true || val === false;\n}"]},"metadata":{},"sourceType":"module"}