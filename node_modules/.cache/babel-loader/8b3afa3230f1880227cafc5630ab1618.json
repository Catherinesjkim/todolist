{"ast":null,"code":"import React from 'react';\nimport SplitContext from './SplitContext';\nimport { getControlTreatmentsWithConfig, WARN_ST_NO_CLIENT } from './constants';\n/**\n * SplitTreatments accepts a list of split names and optional attributes. It access the client at SplitContext to\n * call 'client.getTreatmentsWithConfig()' method, and passes the returned treatments to a child as a function.\n *\n * Since it is a PureComponent, it does a shallow comparison of props to determine if the component should update,\n * i.e., it uses reference identity for `names` and `attributes` props.\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}\n */\n\nclass SplitTreatments extends React.PureComponent {\n  render() {\n    const {\n      names,\n      children,\n      attributes\n    } = this.props;\n    return React.createElement(SplitContext.Consumer, null, ({\n      client,\n      isReady,\n      isTimedout,\n      lastUpdate\n    }) => {\n      let treatments;\n\n      if (!isReady || !client) {\n        treatments = getControlTreatmentsWithConfig(names);\n\n        if (!client) {\n          this.logWarning = true;\n        }\n      } else {\n        treatments = client.getTreatmentsWithConfig(names, attributes);\n      }\n\n      return children({\n        treatments,\n        isReady,\n        isTimedout,\n        lastUpdate\n      });\n    });\n  }\n\n  componentDidMount() {\n    if (this.logWarning) {\n      console.log(WARN_ST_NO_CLIENT);\n    }\n  }\n\n}\n\nexport default SplitTreatments;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio-react/es/SplitTreatments.js"],"names":["React","SplitContext","getControlTreatmentsWithConfig","WARN_ST_NO_CLIENT","SplitTreatments","PureComponent","render","names","children","attributes","props","createElement","Consumer","client","isReady","isTimedout","lastUpdate","treatments","logWarning","getTreatmentsWithConfig","componentDidMount","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,8BAAT,EAAyCC,iBAAzC,QAAkE,aAAlE;AACA;;;;;;;;;;AASA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,aAApC,CAAkD;AAC9CC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAAkC,KAAKC,KAA7C;AACA,WAAQV,KAAK,CAACW,aAAN,CAAoBV,YAAY,CAACW,QAAjC,EAA2C,IAA3C,EAAiD,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA,UAAnB;AAA+BC,MAAAA;AAA/B,KAAD,KAAiD;AACtG,UAAIC,UAAJ;;AACA,UAAI,CAACH,OAAD,IAAY,CAACD,MAAjB,EAAyB;AACrBI,QAAAA,UAAU,GAAGf,8BAA8B,CAACK,KAAD,CAA3C;;AACA,YAAI,CAACM,MAAL,EAAa;AACT,eAAKK,UAAL,GAAkB,IAAlB;AACH;AACJ,OALD,MAMK;AACDD,QAAAA,UAAU,GAAGJ,MAAM,CAACM,uBAAP,CAA+BZ,KAA/B,EAAsCE,UAAtC,CAAb;AACH;;AACD,aAAOD,QAAQ,CAAC;AACZS,QAAAA,UADY;AACAH,QAAAA,OADA;AACSC,QAAAA,UADT;AACqBC,QAAAA;AADrB,OAAD,CAAf;AAGH,KAdO,CAAR;AAeH;;AACDI,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKF,UAAT,EAAqB;AACjBG,MAAAA,OAAO,CAACC,GAAR,CAAYnB,iBAAZ;AACH;AACJ;;AAvB6C;;AAyBlD,eAAeC,eAAf","sourcesContent":["import React from 'react';\nimport SplitContext from './SplitContext';\nimport { getControlTreatmentsWithConfig, WARN_ST_NO_CLIENT } from './constants';\n/**\n * SplitTreatments accepts a list of split names and optional attributes. It access the client at SplitContext to\n * call 'client.getTreatmentsWithConfig()' method, and passes the returned treatments to a child as a function.\n *\n * Since it is a PureComponent, it does a shallow comparison of props to determine if the component should update,\n * i.e., it uses reference identity for `names` and `attributes` props.\n *\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}\n */\nclass SplitTreatments extends React.PureComponent {\n    render() {\n        const { names, children, attributes } = this.props;\n        return (React.createElement(SplitContext.Consumer, null, ({ client, isReady, isTimedout, lastUpdate }) => {\n            let treatments;\n            if (!isReady || !client) {\n                treatments = getControlTreatmentsWithConfig(names);\n                if (!client) {\n                    this.logWarning = true;\n                }\n            }\n            else {\n                treatments = client.getTreatmentsWithConfig(names, attributes);\n            }\n            return children({\n                treatments, isReady, isTimedout, lastUpdate,\n            });\n        }));\n    }\n    componentDidMount() {\n        if (this.logWarning) {\n            console.log(WARN_ST_NO_CLIENT);\n        }\n    }\n}\nexport default SplitTreatments;\n"]},"metadata":{},"sourceType":"module"}