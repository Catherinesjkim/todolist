{"ast":null,"code":"import logFactory from '../../utils/logger';\nvar log = logFactory('splitio-producer:mySegmentsHandler');\nexport default function onSplitsArrivedCtx(segmentsUpdaterTask, context) {\n  var syncingSegments = true;\n  var splitsStorage = context.get(context.constants.STORAGE).splits;\n\n  var _context$get = context.get(context.constants.READINESS),\n      segmentsEventEmitter = _context$get.segments;\n\n  return function onSplitsArrived() {\n    var splitsHaveSegments = splitsStorage.usesSegments();\n\n    if (splitsHaveSegments !== syncingSegments) {\n      syncingSegments = splitsHaveSegments;\n      log.info(\"Turning segments data polling \".concat(splitsHaveSegments ? 'ON' : 'OFF', \".\"));\n\n      if (splitsHaveSegments) {\n        segmentsUpdaterTask.start();\n      } else {\n        var isReady = context.get(context.constants.READY, true);\n        if (!isReady) segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);\n        segmentsUpdaterTask.stop();\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/producer/browser/onSplitsArrivedFactory.js"],"names":["logFactory","log","onSplitsArrivedCtx","segmentsUpdaterTask","context","syncingSegments","splitsStorage","get","constants","STORAGE","splits","_context$get","READINESS","segmentsEventEmitter","segments","onSplitsArrived","splitsHaveSegments","usesSegments","info","concat","start","isReady","READY","emit","SDK_SEGMENTS_ARRIVED","stop"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,oCAAD,CAApB;AACA,eAAe,SAASE,kBAAT,CAA4BC,mBAA5B,EAAiDC,OAAjD,EAA0D;AACvE,MAAIC,eAAe,GAAG,IAAtB;AACA,MAAIC,aAAa,GAAGF,OAAO,CAACG,GAAR,CAAYH,OAAO,CAACI,SAAR,CAAkBC,OAA9B,EAAuCC,MAA3D;;AAEA,MAAIC,YAAY,GAAGP,OAAO,CAACG,GAAR,CAAYH,OAAO,CAACI,SAAR,CAAkBI,SAA9B,CAAnB;AAAA,MACIC,oBAAoB,GAAGF,YAAY,CAACG,QADxC;;AAGA,SAAO,SAASC,eAAT,GAA2B;AAChC,QAAIC,kBAAkB,GAAGV,aAAa,CAACW,YAAd,EAAzB;;AAEA,QAAID,kBAAkB,KAAKX,eAA3B,EAA4C;AAC1CA,MAAAA,eAAe,GAAGW,kBAAlB;AACAf,MAAAA,GAAG,CAACiB,IAAJ,CAAS,iCAAiCC,MAAjC,CAAwCH,kBAAkB,GAAG,IAAH,GAAU,KAApE,EAA2E,GAA3E,CAAT;;AAEA,UAAIA,kBAAJ,EAAwB;AACtBb,QAAAA,mBAAmB,CAACiB,KAApB;AACD,OAFD,MAEO;AACL,YAAIC,OAAO,GAAGjB,OAAO,CAACG,GAAR,CAAYH,OAAO,CAACI,SAAR,CAAkBc,KAA9B,EAAqC,IAArC,CAAd;AACA,YAAI,CAACD,OAAL,EAAcR,oBAAoB,CAACU,IAArB,CAA0BV,oBAAoB,CAACW,oBAA/C;AACdrB,QAAAA,mBAAmB,CAACsB,IAApB;AACD;AACF;AACF,GAfD;AAgBD","sourcesContent":["import logFactory from '../../utils/logger';\nvar log = logFactory('splitio-producer:mySegmentsHandler');\nexport default function onSplitsArrivedCtx(segmentsUpdaterTask, context) {\n  var syncingSegments = true;\n  var splitsStorage = context.get(context.constants.STORAGE).splits;\n\n  var _context$get = context.get(context.constants.READINESS),\n      segmentsEventEmitter = _context$get.segments;\n\n  return function onSplitsArrived() {\n    var splitsHaveSegments = splitsStorage.usesSegments();\n\n    if (splitsHaveSegments !== syncingSegments) {\n      syncingSegments = splitsHaveSegments;\n      log.info(\"Turning segments data polling \".concat(splitsHaveSegments ? 'ON' : 'OFF', \".\"));\n\n      if (splitsHaveSegments) {\n        segmentsUpdaterTask.start();\n      } else {\n        var isReady = context.get(context.constants.READY, true);\n        if (!isReady) segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);\n        segmentsUpdaterTask.stop();\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}