{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport logFactory from '../utils/logger';\nimport tracker from '../utils/timeTracker';\nimport repeat from '../utils/fn/repeat';\nimport metricsService from '../services/metrics';\nimport metricsTimesServiceRequest from '../services/metrics/times';\nimport metricsCountersServiceRequest from '../services/metrics/counters';\nimport { fromLatenciesCollector, fromCountersCollector } from '../services/metrics/dto';\nimport impressionsService from '../services/impressions';\nimport impressionsBulkRequest from '../services/impressions/bulk';\nimport { fromImpressionsCollector } from '../services/impressions/dto';\nimport { SegmentChangesCollector, SplitChangesCollector, MySegmentsCollector, ClientCollector } from './Collectors';\nvar log = logFactory('splitio-metrics');\n\nvar MetricsFactory = function MetricsFactory(context) {\n  var impressionsRetries = 0;\n  var settings = context.get(context.constants.SETTINGS);\n  var storage = context.get(context.constants.STORAGE);\n\n  var pushMetrics = function pushMetrics() {\n    if (storage.metrics.isEmpty() && storage.count.isEmpty()) return _Promise.resolve();\n    log.info('Pushing metrics');\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.METRICS_PUSH); // POST latencies\n\n    var latenciesPromise = storage.metrics.isEmpty() ? null : metricsService(metricsTimesServiceRequest(settings, {\n      data: _JSON$stringify(fromLatenciesCollector(storage.metrics))\n    })).then(function () {\n      return storage.metrics.clear();\n    })[\"catch\"](function () {\n      return storage.metrics.clear();\n    }); // POST counters\n\n    var countersPromise = storage.count.isEmpty() ? null : metricsService(metricsCountersServiceRequest(settings, {\n      data: _JSON$stringify(fromCountersCollector(storage.count))\n    })).then(function () {\n      return storage.count.clear();\n    })[\"catch\"](function () {\n      return storage.count.clear();\n    });\n    return _Promise.all([latenciesPromise, countersPromise]).then(function (resp) {\n      // After both finishes, track the end and return the results\n      latencyTrackerStop();\n      return resp;\n    });\n  };\n\n  var pushImpressions = function pushImpressions() {\n    if (storage.impressions.isEmpty()) return _Promise.resolve();\n    var imprCount = storage.impressions.queue.length;\n    log.info(\"Pushing \".concat(imprCount, \" impressions\"));\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.IMPRESSIONS_PUSH);\n    return impressionsService(impressionsBulkRequest(settings, {\n      data: _JSON$stringify(fromImpressionsCollector(storage.impressions, settings))\n    })).then(function () {\n      impressionsRetries = 0;\n      storage.impressions.clear();\n    })[\"catch\"](function (err) {\n      if (impressionsRetries) {\n        var _context; // For now we retry only once.\n\n\n        log.warn(_concatInstanceProperty(_context = \"Droping \".concat(imprCount, \" impressions after retry. Reason \")).call(_context, err, \".\"));\n        impressionsRetries = 0;\n        storage.impressions.clear();\n      } else {\n        var _context2;\n\n        impressionsRetries++;\n        log.warn(_concatInstanceProperty(_context2 = \"Failed to push \".concat(imprCount, \" impressions, keeping data to retry on next iteration. Reason \")).call(_context2, err, \".\"));\n      }\n    }).then(function () {\n      return latencyTrackerStop();\n    });\n  };\n\n  var stopImpressionsPublisher = false;\n  var stopPerformancePublisher = false;\n  return {\n    start: function start() {\n      stopImpressionsPublisher = repeat(function (schedulePublisher) {\n        return pushImpressions().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.impressionsRefreshRate);\n      stopPerformancePublisher = repeat(function (schedulePublisher) {\n        return pushMetrics().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.metricsRefreshRate);\n    },\n    flush: function flush() {\n      return pushImpressions();\n    },\n    stop: function stop() {\n      stopImpressionsPublisher && stopImpressionsPublisher();\n      stopPerformancePublisher && stopPerformancePublisher();\n    },\n    // Metrics collectors\n    collectors: {\n      segmentChanges: new SegmentChangesCollector(storage),\n      splitChanges: new SplitChangesCollector(storage),\n      mySegments: new MySegmentsCollector(storage),\n      client: new ClientCollector(storage)\n    }\n  };\n};\n\nexport default MetricsFactory;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/metrics/index.js"],"names":["_concatInstanceProperty","_JSON$stringify","_Promise","logFactory","tracker","repeat","metricsService","metricsTimesServiceRequest","metricsCountersServiceRequest","fromLatenciesCollector","fromCountersCollector","impressionsService","impressionsBulkRequest","fromImpressionsCollector","SegmentChangesCollector","SplitChangesCollector","MySegmentsCollector","ClientCollector","log","MetricsFactory","context","impressionsRetries","settings","get","constants","SETTINGS","storage","STORAGE","pushMetrics","metrics","isEmpty","count","resolve","info","latencyTrackerStop","start","TaskNames","METRICS_PUSH","latenciesPromise","data","then","clear","countersPromise","all","resp","pushImpressions","impressions","imprCount","queue","length","concat","IMPRESSIONS_PUSH","err","_context","warn","call","_context2","stopImpressionsPublisher","stopPerformancePublisher","schedulePublisher","scheduler","impressionsRefreshRate","metricsRefreshRate","flush","stop","collectors","segmentChanges","splitChanges","mySegments","client"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AACA,OAAOC,eAAP,MAA4B,sDAA5B;AACA,OAAOC,QAAP,MAAqB,+CAArB;AAEA;;;;;;;;;;;;;;;;AAeA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,OAAOC,0BAAP,MAAuC,2BAAvC;AACA,OAAOC,6BAAP,MAA0C,8BAA1C;AACA,SAASC,sBAAT,EAAiCC,qBAAjC,QAA8D,yBAA9D;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,SAASC,wBAAT,QAAyC,6BAAzC;AACA,SAASC,uBAAT,EAAkCC,qBAAlC,EAAyDC,mBAAzD,EAA8EC,eAA9E,QAAqG,cAArG;AACA,IAAIC,GAAG,GAAGf,UAAU,CAAC,iBAAD,CAApB;;AAEA,IAAIgB,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;AACpD,MAAIC,kBAAkB,GAAG,CAAzB;AACA,MAAIC,QAAQ,GAAGF,OAAO,CAACG,GAAR,CAAYH,OAAO,CAACI,SAAR,CAAkBC,QAA9B,CAAf;AACA,MAAIC,OAAO,GAAGN,OAAO,CAACG,GAAR,CAAYH,OAAO,CAACI,SAAR,CAAkBG,OAA9B,CAAd;;AAEA,MAAIC,WAAW,GAAG,SAASA,WAAT,GAAuB;AACvC,QAAIF,OAAO,CAACG,OAAR,CAAgBC,OAAhB,MAA6BJ,OAAO,CAACK,KAAR,CAAcD,OAAd,EAAjC,EAA0D,OAAO5B,QAAQ,CAAC8B,OAAT,EAAP;AAC1Dd,IAAAA,GAAG,CAACe,IAAJ,CAAS,iBAAT;AACA,QAAIC,kBAAkB,GAAG9B,OAAO,CAAC+B,KAAR,CAAc/B,OAAO,CAACgC,SAAR,CAAkBC,YAAhC,CAAzB,CAHuC,CAGiC;;AAExE,QAAIC,gBAAgB,GAAGZ,OAAO,CAACG,OAAR,CAAgBC,OAAhB,KAA4B,IAA5B,GAAmCxB,cAAc,CAACC,0BAA0B,CAACe,QAAD,EAAW;AAC5GiB,MAAAA,IAAI,EAAEtC,eAAe,CAACQ,sBAAsB,CAACiB,OAAO,CAACG,OAAT,CAAvB;AADuF,KAAX,CAA3B,CAAd,CAEtDW,IAFsD,CAEjD,YAAY;AACnB,aAAOd,OAAO,CAACG,OAAR,CAAgBY,KAAhB,EAAP;AACD,KAJyD,EAIvD,OAJuD,EAI9C,YAAY;AACtB,aAAOf,OAAO,CAACG,OAAR,CAAgBY,KAAhB,EAAP;AACD,KANyD,CAA1D,CALuC,CAWnC;;AAEJ,QAAIC,eAAe,GAAGhB,OAAO,CAACK,KAAR,CAAcD,OAAd,KAA0B,IAA1B,GAAiCxB,cAAc,CAACE,6BAA6B,CAACc,QAAD,EAAW;AAC5GiB,MAAAA,IAAI,EAAEtC,eAAe,CAACS,qBAAqB,CAACgB,OAAO,CAACK,KAAT,CAAtB;AADuF,KAAX,CAA9B,CAAd,CAEnDS,IAFmD,CAE9C,YAAY;AACnB,aAAOd,OAAO,CAACK,KAAR,CAAcU,KAAd,EAAP;AACD,KAJsD,EAIpD,OAJoD,EAI3C,YAAY;AACtB,aAAOf,OAAO,CAACK,KAAR,CAAcU,KAAd,EAAP;AACD,KANsD,CAAvD;AAOA,WAAOvC,QAAQ,CAACyC,GAAT,CAAa,CAACL,gBAAD,EAAmBI,eAAnB,CAAb,EAAkDF,IAAlD,CAAuD,UAAUI,IAAV,EAAgB;AAC5E;AACAV,MAAAA,kBAAkB;AAClB,aAAOU,IAAP;AACD,KAJM,CAAP;AAKD,GAzBD;;AA2BA,MAAIC,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C,QAAInB,OAAO,CAACoB,WAAR,CAAoBhB,OAApB,EAAJ,EAAmC,OAAO5B,QAAQ,CAAC8B,OAAT,EAAP;AACnC,QAAIe,SAAS,GAAGrB,OAAO,CAACoB,WAAR,CAAoBE,KAApB,CAA0BC,MAA1C;AACA/B,IAAAA,GAAG,CAACe,IAAJ,CAAS,WAAWiB,MAAX,CAAkBH,SAAlB,EAA6B,cAA7B,CAAT;AACA,QAAIb,kBAAkB,GAAG9B,OAAO,CAAC+B,KAAR,CAAc/B,OAAO,CAACgC,SAAR,CAAkBe,gBAAhC,CAAzB;AACA,WAAOxC,kBAAkB,CAACC,sBAAsB,CAACU,QAAD,EAAW;AACzDiB,MAAAA,IAAI,EAAEtC,eAAe,CAACY,wBAAwB,CAACa,OAAO,CAACoB,WAAT,EAAsBxB,QAAtB,CAAzB;AADoC,KAAX,CAAvB,CAAlB,CAEHkB,IAFG,CAEE,YAAY;AACnBnB,MAAAA,kBAAkB,GAAG,CAArB;AACAK,MAAAA,OAAO,CAACoB,WAAR,CAAoBL,KAApB;AACD,KALM,EAKJ,OALI,EAKK,UAAUW,GAAV,EAAe;AACzB,UAAI/B,kBAAJ,EAAwB;AACtB,YAAIgC,QAAJ,CADsB,CAGtB;;;AACAnC,QAAAA,GAAG,CAACoC,IAAJ,CAAStD,uBAAuB,CAACqD,QAAQ,GAAG,WAAWH,MAAX,CAAkBH,SAAlB,EAA6B,mCAA7B,CAAZ,CAAvB,CAAsGQ,IAAtG,CAA2GF,QAA3G,EAAqHD,GAArH,EAA0H,GAA1H,CAAT;AACA/B,QAAAA,kBAAkB,GAAG,CAArB;AACAK,QAAAA,OAAO,CAACoB,WAAR,CAAoBL,KAApB;AACD,OAPD,MAOO;AACL,YAAIe,SAAJ;;AAEAnC,QAAAA,kBAAkB;AAClBH,QAAAA,GAAG,CAACoC,IAAJ,CAAStD,uBAAuB,CAACwD,SAAS,GAAG,kBAAkBN,MAAlB,CAAyBH,SAAzB,EAAoC,gEAApC,CAAb,CAAvB,CAA2IQ,IAA3I,CAAgJC,SAAhJ,EAA2JJ,GAA3J,EAAgK,GAAhK,CAAT;AACD;AACF,KAnBM,EAmBJZ,IAnBI,CAmBC,YAAY;AAClB,aAAON,kBAAkB,EAAzB;AACD,KArBM,CAAP;AAsBD,GA3BD;;AA6BA,MAAIuB,wBAAwB,GAAG,KAA/B;AACA,MAAIC,wBAAwB,GAAG,KAA/B;AACA,SAAO;AACLvB,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBsB,MAAAA,wBAAwB,GAAGpD,MAAM,CAAC,UAAUsD,iBAAV,EAA6B;AAC7D,eAAOd,eAAe,GAAGL,IAAlB,CAAuB,YAAY;AACxC,iBAAOmB,iBAAiB,EAAxB;AACD,SAFM,CAAP;AAGD,OAJgC,EAI9BrC,QAAQ,CAACsC,SAAT,CAAmBC,sBAJW,CAAjC;AAKAH,MAAAA,wBAAwB,GAAGrD,MAAM,CAAC,UAAUsD,iBAAV,EAA6B;AAC7D,eAAO/B,WAAW,GAAGY,IAAd,CAAmB,YAAY;AACpC,iBAAOmB,iBAAiB,EAAxB;AACD,SAFM,CAAP;AAGD,OAJgC,EAI9BrC,QAAQ,CAACsC,SAAT,CAAmBE,kBAJW,CAAjC;AAKD,KAZI;AAaLC,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,aAAOlB,eAAe,EAAtB;AACD,KAfI;AAgBLmB,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpBP,MAAAA,wBAAwB,IAAIA,wBAAwB,EAApD;AACAC,MAAAA,wBAAwB,IAAIA,wBAAwB,EAApD;AACD,KAnBI;AAoBL;AACAO,IAAAA,UAAU,EAAE;AACVC,MAAAA,cAAc,EAAE,IAAIpD,uBAAJ,CAA4BY,OAA5B,CADN;AAEVyC,MAAAA,YAAY,EAAE,IAAIpD,qBAAJ,CAA0BW,OAA1B,CAFJ;AAGV0C,MAAAA,UAAU,EAAE,IAAIpD,mBAAJ,CAAwBU,OAAxB,CAHF;AAIV2C,MAAAA,MAAM,EAAE,IAAIpD,eAAJ,CAAoBS,OAApB;AAJE;AArBP,GAAP;AA4BD,CA3FD;;AA6FA,eAAeP,cAAf","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport tracker from '../utils/timeTracker';\nimport repeat from '../utils/fn/repeat';\nimport metricsService from '../services/metrics';\nimport metricsTimesServiceRequest from '../services/metrics/times';\nimport metricsCountersServiceRequest from '../services/metrics/counters';\nimport { fromLatenciesCollector, fromCountersCollector } from '../services/metrics/dto';\nimport impressionsService from '../services/impressions';\nimport impressionsBulkRequest from '../services/impressions/bulk';\nimport { fromImpressionsCollector } from '../services/impressions/dto';\nimport { SegmentChangesCollector, SplitChangesCollector, MySegmentsCollector, ClientCollector } from './Collectors';\nvar log = logFactory('splitio-metrics');\n\nvar MetricsFactory = function MetricsFactory(context) {\n  var impressionsRetries = 0;\n  var settings = context.get(context.constants.SETTINGS);\n  var storage = context.get(context.constants.STORAGE);\n\n  var pushMetrics = function pushMetrics() {\n    if (storage.metrics.isEmpty() && storage.count.isEmpty()) return _Promise.resolve();\n    log.info('Pushing metrics');\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.METRICS_PUSH); // POST latencies\n\n    var latenciesPromise = storage.metrics.isEmpty() ? null : metricsService(metricsTimesServiceRequest(settings, {\n      data: _JSON$stringify(fromLatenciesCollector(storage.metrics))\n    })).then(function () {\n      return storage.metrics.clear();\n    })[\"catch\"](function () {\n      return storage.metrics.clear();\n    }); // POST counters\n\n    var countersPromise = storage.count.isEmpty() ? null : metricsService(metricsCountersServiceRequest(settings, {\n      data: _JSON$stringify(fromCountersCollector(storage.count))\n    })).then(function () {\n      return storage.count.clear();\n    })[\"catch\"](function () {\n      return storage.count.clear();\n    });\n    return _Promise.all([latenciesPromise, countersPromise]).then(function (resp) {\n      // After both finishes, track the end and return the results\n      latencyTrackerStop();\n      return resp;\n    });\n  };\n\n  var pushImpressions = function pushImpressions() {\n    if (storage.impressions.isEmpty()) return _Promise.resolve();\n    var imprCount = storage.impressions.queue.length;\n    log.info(\"Pushing \".concat(imprCount, \" impressions\"));\n    var latencyTrackerStop = tracker.start(tracker.TaskNames.IMPRESSIONS_PUSH);\n    return impressionsService(impressionsBulkRequest(settings, {\n      data: _JSON$stringify(fromImpressionsCollector(storage.impressions, settings))\n    })).then(function () {\n      impressionsRetries = 0;\n      storage.impressions.clear();\n    })[\"catch\"](function (err) {\n      if (impressionsRetries) {\n        var _context;\n\n        // For now we retry only once.\n        log.warn(_concatInstanceProperty(_context = \"Droping \".concat(imprCount, \" impressions after retry. Reason \")).call(_context, err, \".\"));\n        impressionsRetries = 0;\n        storage.impressions.clear();\n      } else {\n        var _context2;\n\n        impressionsRetries++;\n        log.warn(_concatInstanceProperty(_context2 = \"Failed to push \".concat(imprCount, \" impressions, keeping data to retry on next iteration. Reason \")).call(_context2, err, \".\"));\n      }\n    }).then(function () {\n      return latencyTrackerStop();\n    });\n  };\n\n  var stopImpressionsPublisher = false;\n  var stopPerformancePublisher = false;\n  return {\n    start: function start() {\n      stopImpressionsPublisher = repeat(function (schedulePublisher) {\n        return pushImpressions().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.impressionsRefreshRate);\n      stopPerformancePublisher = repeat(function (schedulePublisher) {\n        return pushMetrics().then(function () {\n          return schedulePublisher();\n        });\n      }, settings.scheduler.metricsRefreshRate);\n    },\n    flush: function flush() {\n      return pushImpressions();\n    },\n    stop: function stop() {\n      stopImpressionsPublisher && stopImpressionsPublisher();\n      stopPerformancePublisher && stopPerformancePublisher();\n    },\n    // Metrics collectors\n    collectors: {\n      segmentChanges: new SegmentChangesCollector(storage),\n      splitChanges: new SplitChangesCollector(storage),\n      mySegments: new MySegmentsCollector(storage),\n      client: new ClientCollector(storage)\n    }\n  };\n};\n\nexport default MetricsFactory;"]},"metadata":{},"sourceType":"module"}