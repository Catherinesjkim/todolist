{"ast":null,"code":"/* eslint-disable no-console */\n'use strict';\n\nimport _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\nimport _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";\nimport _classCallCheck from \"@babel/runtime-corejs3/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs3/helpers/esm/createClass\";\nvar isNode = typeof process !== 'undefined' && process.version ? true : false;\nexport var LogLevels = {\n  'DEBUG': 'DEBUG',\n  'INFO': 'INFO',\n  'WARN': 'WARN',\n  'ERROR': 'ERROR',\n  'NONE': 'NONE'\n}; // DEBUG is the default. The log level is not specific to an SDK instance.\n\nvar GlobalLogLevel = LogLevels.DEBUG;\nexport var setLogLevel = function setLogLevel(level) {\n  GlobalLogLevel = level;\n};\nvar defaultOptions = {\n  showLevel: true,\n  displayAllErrors: false\n};\nexport var Logger = /*#__PURE__*/function () {\n  function Logger(category, options) {\n    _classCallCheck(this, Logger);\n\n    this.category = category;\n    this.options = _Object$assign({}, defaultOptions, options);\n  }\n\n  _createClass(Logger, [{\n    key: \"debug\",\n    value: function debug(msg) {\n      if (this._shouldLog(LogLevels.DEBUG)) this._log(LogLevels.DEBUG, msg);\n    }\n  }, {\n    key: \"info\",\n    value: function info(msg) {\n      if (this._shouldLog(LogLevels.INFO)) this._log(LogLevels.INFO, msg);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(msg) {\n      if (this._shouldLog(LogLevels.WARN)) this._log(LogLevels.WARN, msg);\n    }\n  }, {\n    key: \"error\",\n    value: function error(msg) {\n      if (this.options.displayAllErrors || this._shouldLog(LogLevels.ERROR)) this._log(LogLevels.ERROR, msg);\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(level, text) {\n      var formattedText = this._generateLogMessage(level, text);\n\n      var method = level === LogLevels.ERROR && !isNode ? 'error' : 'log';\n      console[method](formattedText);\n    }\n  }, {\n    key: \"_generateLogMessage\",\n    value: function _generateLogMessage(level, text) {\n      var textPre = ' => ';\n      var result = '';\n\n      if (this.options.showLevel) {\n        result += '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';\n      }\n\n      if (this.category) {\n        result += this.category + textPre;\n      }\n\n      return result += text;\n    }\n  }, {\n    key: \"_shouldLog\",\n    value: function _shouldLog(level) {\n      var _context;\n\n      var logLevel = GlobalLogLevel;\n\n      var levels = _mapInstanceProperty(_context = _Object$keys(LogLevels)).call(_context, function (f) {\n        return LogLevels[f];\n      });\n\n      var index = _indexOfInstanceProperty(levels).call(levels, level); // What's the index of what it's trying to check if it should log\n\n\n      var levelIdx = _indexOfInstanceProperty(levels).call(levels, logLevel); // What's the current log level index.\n\n\n      return index >= levelIdx;\n    }\n  }]);\n\n  return Logger;\n}();","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/utils/logger/LoggerFactory.js"],"names":["_indexOfInstanceProperty","_Object$keys","_mapInstanceProperty","_Object$assign","_classCallCheck","_createClass","isNode","process","version","LogLevels","GlobalLogLevel","DEBUG","setLogLevel","level","defaultOptions","showLevel","displayAllErrors","Logger","category","options","key","value","debug","msg","_shouldLog","_log","info","INFO","warn","WARN","error","ERROR","text","formattedText","_generateLogMessage","method","console","textPre","result","_context","logLevel","levels","call","f","index","levelIdx"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nimport _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\nimport _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";\nimport _classCallCheck from \"@babel/runtime-corejs3/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs3/helpers/esm/createClass\";\nvar isNode = typeof process !== 'undefined' && process.version ? true : false;\nexport var LogLevels = {\n  'DEBUG': 'DEBUG',\n  'INFO': 'INFO',\n  'WARN': 'WARN',\n  'ERROR': 'ERROR',\n  'NONE': 'NONE'\n}; // DEBUG is the default. The log level is not specific to an SDK instance.\n\nvar GlobalLogLevel = LogLevels.DEBUG;\nexport var setLogLevel = function setLogLevel(level) {\n  GlobalLogLevel = level;\n};\nvar defaultOptions = {\n  showLevel: true,\n  displayAllErrors: false\n};\nexport var Logger =\n/*#__PURE__*/\nfunction () {\n  function Logger(category, options) {\n    _classCallCheck(this, Logger);\n\n    this.category = category;\n    this.options = _Object$assign({}, defaultOptions, options);\n  }\n\n  _createClass(Logger, [{\n    key: \"debug\",\n    value: function debug(msg) {\n      if (this._shouldLog(LogLevels.DEBUG)) this._log(LogLevels.DEBUG, msg);\n    }\n  }, {\n    key: \"info\",\n    value: function info(msg) {\n      if (this._shouldLog(LogLevels.INFO)) this._log(LogLevels.INFO, msg);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(msg) {\n      if (this._shouldLog(LogLevels.WARN)) this._log(LogLevels.WARN, msg);\n    }\n  }, {\n    key: \"error\",\n    value: function error(msg) {\n      if (this.options.displayAllErrors || this._shouldLog(LogLevels.ERROR)) this._log(LogLevels.ERROR, msg);\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(level, text) {\n      var formattedText = this._generateLogMessage(level, text);\n\n      var method = level === LogLevels.ERROR && !isNode ? 'error' : 'log';\n      console[method](formattedText);\n    }\n  }, {\n    key: \"_generateLogMessage\",\n    value: function _generateLogMessage(level, text) {\n      var textPre = ' => ';\n      var result = '';\n\n      if (this.options.showLevel) {\n        result += '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';\n      }\n\n      if (this.category) {\n        result += this.category + textPre;\n      }\n\n      return result += text;\n    }\n  }, {\n    key: \"_shouldLog\",\n    value: function _shouldLog(level) {\n      var _context;\n\n      var logLevel = GlobalLogLevel;\n\n      var levels = _mapInstanceProperty(_context = _Object$keys(LogLevels)).call(_context, function (f) {\n        return LogLevels[f];\n      });\n\n      var index = _indexOfInstanceProperty(levels).call(levels, level); // What's the index of what it's trying to check if it should log\n\n\n      var levelIdx = _indexOfInstanceProperty(levels).call(levels, logLevel); // What's the current log level index.\n\n\n      return index >= levelIdx;\n    }\n  }]);\n\n  return Logger;\n}();"]},"metadata":{},"sourceType":"module"}