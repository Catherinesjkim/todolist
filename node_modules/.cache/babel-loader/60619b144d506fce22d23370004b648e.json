{"ast":null,"code":"import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport logFactory from '../utils/logger';\nimport thenable from '../utils/promise/thenable';\nvar log = logFactory('splitio-client:impression-tracker');\n\nfunction ImpressionsTrackerContext(context) {\n  var collector = context.get(context.constants.STORAGE).impressions;\n  var settings = context.get(context.constants.SETTINGS);\n  var listener = settings.impressionListener;\n  var _settings$runtime = settings.runtime,\n      ip = _settings$runtime.ip,\n      hostname = _settings$runtime.hostname;\n  var sdkLanguageVersion = settings.version;\n  return {\n    track: function track(impression, attributes) {\n      var res = collector.track([impression]); // If we're on an async storage, handle error and log it.\n\n      if (thenable(res)) res[\"catch\"](function (err) {\n        log.error(\"Could not store impression. Error: \".concat(err));\n      }); // Wrap in a timeout because we don't want it to be blocking.\n\n      listener && _setTimeout(function () {\n        try {\n          // An exception on the listener should not break the SDK.\n          listener.logImpression({\n            impression: impression,\n            attributes: attributes,\n            ip: ip,\n            hostname: hostname,\n            sdkLanguageVersion: sdkLanguageVersion\n          });\n        } catch (err) {\n          log.error(\"Impression listener logImpression method threw: \".concat(err, \".\"));\n        }\n      }, 0);\n    }\n  };\n}\n\nexport default ImpressionsTrackerContext;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/trackers/impression.js"],"names":["_setTimeout","logFactory","thenable","log","ImpressionsTrackerContext","context","collector","get","constants","STORAGE","impressions","settings","SETTINGS","listener","impressionListener","_settings$runtime","runtime","ip","hostname","sdkLanguageVersion","version","track","impression","attributes","res","err","error","concat","logImpression"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mDAAxB;AAEA;;;;;;;;;;;;;;;;AAeA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,IAAIC,GAAG,GAAGF,UAAU,CAAC,mCAAD,CAApB;;AAEA,SAASG,yBAAT,CAAmCC,OAAnC,EAA4C;AAC1C,MAAIC,SAAS,GAAGD,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBC,OAA9B,EAAuCC,WAAvD;AACA,MAAIC,QAAQ,GAAGN,OAAO,CAACE,GAAR,CAAYF,OAAO,CAACG,SAAR,CAAkBI,QAA9B,CAAf;AACA,MAAIC,QAAQ,GAAGF,QAAQ,CAACG,kBAAxB;AACA,MAAIC,iBAAiB,GAAGJ,QAAQ,CAACK,OAAjC;AAAA,MACIC,EAAE,GAAGF,iBAAiB,CAACE,EAD3B;AAAA,MAEIC,QAAQ,GAAGH,iBAAiB,CAACG,QAFjC;AAGA,MAAIC,kBAAkB,GAAGR,QAAQ,CAACS,OAAlC;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,UAAf,EAA2BC,UAA3B,EAAuC;AAC5C,UAAIC,GAAG,GAAGlB,SAAS,CAACe,KAAV,CAAgB,CAACC,UAAD,CAAhB,CAAV,CAD4C,CACH;;AAEzC,UAAIpB,QAAQ,CAACsB,GAAD,CAAZ,EAAmBA,GAAG,CAAC,OAAD,CAAH,CAAa,UAAUC,GAAV,EAAe;AAC7CtB,QAAAA,GAAG,CAACuB,KAAJ,CAAU,sCAAsCC,MAAtC,CAA6CF,GAA7C,CAAV;AACD,OAFkB,EAHyB,CAKxC;;AAEJZ,MAAAA,QAAQ,IAAIb,WAAW,CAAC,YAAY;AAClC,YAAI;AACF;AACAa,UAAAA,QAAQ,CAACe,aAAT,CAAuB;AACrBN,YAAAA,UAAU,EAAEA,UADS;AAErBC,YAAAA,UAAU,EAAEA,UAFS;AAGrBN,YAAAA,EAAE,EAAEA,EAHiB;AAIrBC,YAAAA,QAAQ,EAAEA,QAJW;AAKrBC,YAAAA,kBAAkB,EAAEA;AALC,WAAvB;AAOD,SATD,CASE,OAAOM,GAAP,EAAY;AACZtB,UAAAA,GAAG,CAACuB,KAAJ,CAAU,mDAAmDC,MAAnD,CAA0DF,GAA1D,EAA+D,GAA/D,CAAV;AACD;AACF,OAbsB,EAapB,CAboB,CAAvB;AAcD;AAtBI,GAAP;AAwBD;;AAED,eAAerB,yBAAf","sourcesContent":["import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../utils/logger';\nimport thenable from '../utils/promise/thenable';\nvar log = logFactory('splitio-client:impression-tracker');\n\nfunction ImpressionsTrackerContext(context) {\n  var collector = context.get(context.constants.STORAGE).impressions;\n  var settings = context.get(context.constants.SETTINGS);\n  var listener = settings.impressionListener;\n  var _settings$runtime = settings.runtime,\n      ip = _settings$runtime.ip,\n      hostname = _settings$runtime.hostname;\n  var sdkLanguageVersion = settings.version;\n  return {\n    track: function track(impression, attributes) {\n      var res = collector.track([impression]); // If we're on an async storage, handle error and log it.\n\n      if (thenable(res)) res[\"catch\"](function (err) {\n        log.error(\"Could not store impression. Error: \".concat(err));\n      }); // Wrap in a timeout because we don't want it to be blocking.\n\n      listener && _setTimeout(function () {\n        try {\n          // An exception on the listener should not break the SDK.\n          listener.logImpression({\n            impression: impression,\n            attributes: attributes,\n            ip: ip,\n            hostname: hostname,\n            sdkLanguageVersion: sdkLanguageVersion\n          });\n        } catch (err) {\n          log.error(\"Impression listener logImpression method threw: \".concat(err, \".\"));\n        }\n      }, 0);\n    }\n  };\n}\n\nexport default ImpressionsTrackerContext;"]},"metadata":{},"sourceType":"module"}