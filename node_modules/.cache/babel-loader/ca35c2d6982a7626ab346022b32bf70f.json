{"ast":null,"code":"export function getClientWithStatus(factory, key, trafficType) {\n  const client = key ? factory.client(key, trafficType) : factory.client();\n\n  if (!client._trackingStatus) {\n    // We cannot use event listeners, since clients might be already Ready or Timedout\n    client.ready().then(() => {\n      client.isReady = true;\n    }, () => {\n      client.isTimedout = true; // register a listener for SDK_READY event, that might trigger after a timeout\n\n      client.once(client.Event.SDK_READY, () => {\n        client.isReady = true;\n      });\n    });\n    client._trackingStatus = true;\n    client.isReady = false;\n    client.isTimedout = false;\n  }\n\n  return client;\n}","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio-react/es/utils.js"],"names":["getClientWithStatus","factory","key","trafficType","client","_trackingStatus","ready","then","isReady","isTimedout","once","Event","SDK_READY"],"mappings":"AAAA,OAAO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,GAAtC,EAA2CC,WAA3C,EAAwD;AAC3D,QAAMC,MAAM,GAAIF,GAAG,GAAGD,OAAO,CAACG,MAAR,CAAeF,GAAf,EAAoBC,WAApB,CAAH,GAAsCF,OAAO,CAACG,MAAR,EAAzD;;AACA,MAAI,CAACA,MAAM,CAACC,eAAZ,EAA6B;AACzB;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeC,IAAf,CAAoB,MAAM;AACtBH,MAAAA,MAAM,CAACI,OAAP,GAAiB,IAAjB;AACH,KAFD,EAEG,MAAM;AACLJ,MAAAA,MAAM,CAACK,UAAP,GAAoB,IAApB,CADK,CAEL;;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAYN,MAAM,CAACO,KAAP,CAAaC,SAAzB,EAAoC,MAAM;AACtCR,QAAAA,MAAM,CAACI,OAAP,GAAiB,IAAjB;AACH,OAFD;AAGH,KARD;AASAJ,IAAAA,MAAM,CAACC,eAAP,GAAyB,IAAzB;AACAD,IAAAA,MAAM,CAACI,OAAP,GAAiB,KAAjB;AACAJ,IAAAA,MAAM,CAACK,UAAP,GAAoB,KAApB;AACH;;AACD,SAAOL,MAAP;AACH","sourcesContent":["export function getClientWithStatus(factory, key, trafficType) {\n    const client = (key ? factory.client(key, trafficType) : factory.client());\n    if (!client._trackingStatus) {\n        // We cannot use event listeners, since clients might be already Ready or Timedout\n        client.ready().then(() => {\n            client.isReady = true;\n        }, () => {\n            client.isTimedout = true;\n            // register a listener for SDK_READY event, that might trigger after a timeout\n            client.once(client.Event.SDK_READY, () => {\n                client.isReady = true;\n            });\n        });\n        client._trackingStatus = true;\n        client.isReady = false;\n        client.isTimedout = false;\n    }\n    return client;\n}\n"]},"metadata":{},"sourceType":"module"}