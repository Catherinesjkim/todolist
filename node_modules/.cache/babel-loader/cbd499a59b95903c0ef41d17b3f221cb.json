{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";\nimport { get } from '../utils/lang';\nimport ClientWithInputValidationLayer from './inputValidation';\nimport { LOCALHOST_MODE } from '../utils/constants';\nimport { validateKey, validateTrafficType } from '../utils/inputValidation';\n\nfunction BrowserClientFactory(context) {\n  var _context, _context2, _context3, _context4, _context5, _bindInstanceProperty2, _context6;\n\n  var settings = context.get(context.constants.SETTINGS);\n  var maybeKey = get(settings, 'core.key', undefined);\n  var maybeTT = get(settings, 'core.trafficType', undefined);\n\n  if (settings.mode === LOCALHOST_MODE && maybeKey === undefined) {\n    settings.core.key = 'localhost_key';\n  } else {\n    settings.core.key = validateKey(maybeKey, 'Client instantiation');\n  } // Key is also binded to the .track method. Same thing happens with trafficType but only if present on configs. (not required)\n\n\n  var trackBindings = [settings.core.key];\n\n  if (maybeTT !== undefined) {\n    var tt = validateTrafficType(maybeTT, 'Client instantiation');\n    settings.core.trafficType = tt;\n    trackBindings.push(tt);\n  }\n\n  var client = ClientWithInputValidationLayer(context, true, trackBindings.length > 1);\n  client.isBrowserClient = true; // In the browser land, we can bind the key and the traffic type (if provided)\n\n  client.getTreatment = _bindInstanceProperty(_context = client.getTreatment).call(_context, client, settings.core.key);\n  client.getTreatmentWithConfig = _bindInstanceProperty(_context2 = client.getTreatmentWithConfig).call(_context2, client, settings.core.key);\n  client.getTreatments = _bindInstanceProperty(_context3 = client.getTreatments).call(_context3, client, settings.core.key);\n  client.getTreatmentsWithConfig = _bindInstanceProperty(_context4 = client.getTreatmentsWithConfig).call(_context4, client, settings.core.key);\n  client.track = (_bindInstanceProperty2 = _bindInstanceProperty(_context5 = client.track)).call.apply(_bindInstanceProperty2, _concatInstanceProperty(_context6 = [_context5, client]).call(_context6, trackBindings));\n  return client;\n}\n\nexport default BrowserClientFactory;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/client/browser.js"],"names":["_concatInstanceProperty","_bindInstanceProperty","get","ClientWithInputValidationLayer","LOCALHOST_MODE","validateKey","validateTrafficType","BrowserClientFactory","context","_context","_context2","_context3","_context4","_context5","_bindInstanceProperty2","_context6","settings","constants","SETTINGS","maybeKey","undefined","maybeTT","mode","core","key","trackBindings","tt","trafficType","push","client","length","isBrowserClient","getTreatment","call","getTreatmentWithConfig","getTreatments","getTreatmentsWithConfig","track","apply"],"mappings":"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","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";\nimport { get } from '../utils/lang';\nimport ClientWithInputValidationLayer from './inputValidation';\nimport { LOCALHOST_MODE } from '../utils/constants';\nimport { validateKey, validateTrafficType } from '../utils/inputValidation';\n\nfunction BrowserClientFactory(context) {\n  var _context, _context2, _context3, _context4, _context5, _bindInstanceProperty2, _context6;\n\n  var settings = context.get(context.constants.SETTINGS);\n  var maybeKey = get(settings, 'core.key', undefined);\n  var maybeTT = get(settings, 'core.trafficType', undefined);\n\n  if (settings.mode === LOCALHOST_MODE && maybeKey === undefined) {\n    settings.core.key = 'localhost_key';\n  } else {\n    settings.core.key = validateKey(maybeKey, 'Client instantiation');\n  } // Key is also binded to the .track method. Same thing happens with trafficType but only if present on configs. (not required)\n\n\n  var trackBindings = [settings.core.key];\n\n  if (maybeTT !== undefined) {\n    var tt = validateTrafficType(maybeTT, 'Client instantiation');\n    settings.core.trafficType = tt;\n    trackBindings.push(tt);\n  }\n\n  var client = ClientWithInputValidationLayer(context, true, trackBindings.length > 1);\n  client.isBrowserClient = true; // In the browser land, we can bind the key and the traffic type (if provided)\n\n  client.getTreatment = _bindInstanceProperty(_context = client.getTreatment).call(_context, client, settings.core.key);\n  client.getTreatmentWithConfig = _bindInstanceProperty(_context2 = client.getTreatmentWithConfig).call(_context2, client, settings.core.key);\n  client.getTreatments = _bindInstanceProperty(_context3 = client.getTreatments).call(_context3, client, settings.core.key);\n  client.getTreatmentsWithConfig = _bindInstanceProperty(_context4 = client.getTreatmentsWithConfig).call(_context4, client, settings.core.key);\n  client.track = (_bindInstanceProperty2 = _bindInstanceProperty(_context5 = client.track)).call.apply(_bindInstanceProperty2, _concatInstanceProperty(_context6 = [_context5, client]).call(_context6, trackBindings));\n  return client;\n}\n\nexport default BrowserClientFactory;"]},"metadata":{},"sourceType":"module"}