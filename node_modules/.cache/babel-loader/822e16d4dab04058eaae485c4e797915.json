{"ast":null,"code":"import { useContext } from 'react';\nimport SplitContext from './SplitContext';\n/**\n * 'useClient' is a custom hook that returns a client from the Split context.\n * It uses the 'useContext' hook to access the context, which is updated by\n * SplitFactory and SplitClient components in the hierarchy of components.\n *\n * @return A Split Client instance, or null if used outside the scope of SplitFactory\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#advanced-instantiate-multiple-sdk-clients}\n */\n\nconst useClient = (key, trafficType) => {\n  const {\n    factory,\n    client\n  } = useContext(SplitContext);\n\n  if (key) {\n    return factory ? factory.client(key, trafficType) : null;\n  }\n\n  return client;\n};\n\nexport default useClient;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio-react/es/useClient.js"],"names":["useContext","SplitContext","useClient","key","trafficType","factory","client"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA;;;;;;;;;AAQA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,WAAN,KAAsB;AACpC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBN,UAAU,CAACC,YAAD,CAAtC;;AACA,MAAIE,GAAJ,EAAS;AACL,WAAOE,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAeH,GAAf,EAAoBC,WAApB,CAAH,GAAsC,IAApD;AACH;;AACD,SAAOE,MAAP;AACH,CAND;;AAOA,eAAeJ,SAAf","sourcesContent":["import { useContext } from 'react';\nimport SplitContext from './SplitContext';\n/**\n * 'useClient' is a custom hook that returns a client from the Split context.\n * It uses the 'useContext' hook to access the context, which is updated by\n * SplitFactory and SplitClient components in the hierarchy of components.\n *\n * @return A Split Client instance, or null if used outside the scope of SplitFactory\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#advanced-instantiate-multiple-sdk-clients}\n */\nconst useClient = (key, trafficType) => {\n    const { factory, client } = useContext(SplitContext);\n    if (key) {\n        return factory ? factory.client(key, trafficType) : null;\n    }\n    return client;\n};\nexport default useClient;\n"]},"metadata":{},"sourceType":"module"}