{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine');\nimport legacy from './legacy';\nimport murmur from './murmur3';\nvar MURMUR_ID = 2;\n/**\n * Returns the bucket function by algoId.\n */\n\nfunction getBucketAlgo(algoId) {\n  if (algoId === MURMUR_ID) {\n    return murmur.bucket;\n  } else {\n    return legacy.bucket;\n  }\n}\n\nvar engine = {\n  /**\n   * Get the treatment name given a key, a seed, and the percentage of each treatment.\n   */\n  getTreatment: function getTreatment(key, seed, treatments, algoId) {\n    var _context, _context2, _context3, _context4;\n\n    var bucket = getBucketAlgo(algoId)(key, seed);\n    var treatment = treatments.getTreatmentFor(bucket);\n    log.debug(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = \"[engine] using algo \".concat(algoId !== MURMUR_ID ? 'legacy' : 'murmur', \" bucket \")).call(_context4, bucket, \" for key \")).call(_context3, key, \" using seed \")).call(_context2, seed, \" - treatment \")).call(_context, treatment));\n    return treatment;\n  },\n\n  /**\n   * Evaluates the traffic allocation to see if we should apply rollout conditions or not.\n   */\n  shouldApplyRollout: function shouldApplyRollout(trafficAllocation, key, trafficAllocationSeed, algoId) {\n    // For rollout, if traffic allocation for splits is 100%, we don't need to filter it because everything should evaluate the rollout.\n    if (trafficAllocation < 100) {\n      var bucket = getBucketAlgo(algoId)(key, trafficAllocationSeed);\n\n      if (bucket > trafficAllocation) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\nexport default engine;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/engine/engine/index.js"],"names":["_concatInstanceProperty","logFactory","log","legacy","murmur","MURMUR_ID","getBucketAlgo","algoId","bucket","engine","getTreatment","key","seed","treatments","_context","_context2","_context3","_context4","treatment","getTreatmentFor","debug","concat","call","shouldApplyRollout","trafficAllocation","trafficAllocationSeed"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AAEA;;;;;;;;;;;;;;;;AAeA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,gBAAD,CAApB;AACA,OAAOE,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,IAAIC,SAAS,GAAG,CAAhB;AACA;;;;AAIA,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,MAAIA,MAAM,KAAKF,SAAf,EAA0B;AACxB,WAAOD,MAAM,CAACI,MAAd;AACD,GAFD,MAEO;AACL,WAAOL,MAAM,CAACK,MAAd;AACD;AACF;;AAED,IAAIC,MAAM,GAAG;AACX;;;AAGAC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CN,MAA7C,EAAqD;AACjE,QAAIO,QAAJ,EAAcC,SAAd,EAAyBC,SAAzB,EAAoCC,SAApC;;AAEA,QAAIT,MAAM,GAAGF,aAAa,CAACC,MAAD,CAAb,CAAsBI,GAAtB,EAA2BC,IAA3B,CAAb;AACA,QAAIM,SAAS,GAAGL,UAAU,CAACM,eAAX,CAA2BX,MAA3B,CAAhB;AACAN,IAAAA,GAAG,CAACkB,KAAJ,CAAUpB,uBAAuB,CAACc,QAAQ,GAAGd,uBAAuB,CAACe,SAAS,GAAGf,uBAAuB,CAACgB,SAAS,GAAGhB,uBAAuB,CAACiB,SAAS,GAAG,uBAAuBI,MAAvB,CAA8Bd,MAAM,KAAKF,SAAX,GAAuB,QAAvB,GAAkC,QAAhE,EAA0E,UAA1E,CAAb,CAAvB,CAA2HiB,IAA3H,CAAgIL,SAAhI,EAA2IT,MAA3I,EAAmJ,WAAnJ,CAAb,CAAvB,CAAqMc,IAArM,CAA0MN,SAA1M,EAAqNL,GAArN,EAA0N,cAA1N,CAAb,CAAvB,CAA+QW,IAA/Q,CAAoRP,SAApR,EAA+RH,IAA/R,EAAqS,eAArS,CAAZ,CAAvB,CAA0VU,IAA1V,CAA+VR,QAA/V,EAAyWI,SAAzW,CAAV;AACA,WAAOA,SAAP;AACD,GAXU;;AAaX;;;AAGAK,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,iBAA5B,EAA+Cb,GAA/C,EAAoDc,qBAApD,EAA2ElB,MAA3E,EAAmF;AACrG;AACA,QAAIiB,iBAAiB,GAAG,GAAxB,EAA6B;AAC3B,UAAIhB,MAAM,GAAGF,aAAa,CAACC,MAAD,CAAb,CAAsBI,GAAtB,EAA2Bc,qBAA3B,CAAb;;AAEA,UAAIjB,MAAM,GAAGgB,iBAAb,EAAgC;AAC9B,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;AA3BU,CAAb;AA6BA,eAAef,MAAf","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine');\nimport legacy from './legacy';\nimport murmur from './murmur3';\nvar MURMUR_ID = 2;\n/**\n * Returns the bucket function by algoId.\n */\n\nfunction getBucketAlgo(algoId) {\n  if (algoId === MURMUR_ID) {\n    return murmur.bucket;\n  } else {\n    return legacy.bucket;\n  }\n}\n\nvar engine = {\n  /**\n   * Get the treatment name given a key, a seed, and the percentage of each treatment.\n   */\n  getTreatment: function getTreatment(key, seed, treatments, algoId) {\n    var _context, _context2, _context3, _context4;\n\n    var bucket = getBucketAlgo(algoId)(key, seed);\n    var treatment = treatments.getTreatmentFor(bucket);\n    log.debug(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = \"[engine] using algo \".concat(algoId !== MURMUR_ID ? 'legacy' : 'murmur', \" bucket \")).call(_context4, bucket, \" for key \")).call(_context3, key, \" using seed \")).call(_context2, seed, \" - treatment \")).call(_context, treatment));\n    return treatment;\n  },\n\n  /**\n   * Evaluates the traffic allocation to see if we should apply rollout conditions or not.\n   */\n  shouldApplyRollout: function shouldApplyRollout(trafficAllocation, key, trafficAllocationSeed, algoId) {\n    // For rollout, if traffic allocation for splits is 100%, we don't need to filter it because everything should evaluate the rollout.\n    if (trafficAllocation < 100) {\n      var bucket = getBucketAlgo(algoId)(key, trafficAllocationSeed);\n\n      if (bucket > trafficAllocation) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\nexport default engine;"]},"metadata":{},"sourceType":"module"}