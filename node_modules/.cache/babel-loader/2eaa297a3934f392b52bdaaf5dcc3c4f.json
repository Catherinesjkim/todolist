{"ast":null,"code":"/* eslint-disable no-fallthrough */\nimport utfx from 'utfx';\nvar stringSource = utfx.stringSource;\nvar stringDestination = utfx.stringDestination;\nvar encodeUTF16toUTF8 = utfx.encodeUTF16toUTF8;\n\nfunction UTF16ToUTF8(key) {\n  var sd;\n  encodeUTF16toUTF8(stringSource(key), sd = stringDestination());\n  return sd();\n} // +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n// PRIVATE FUNCTIONS\n// -----------------\n\n\nfunction _x86Multiply(m, n) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n  return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);\n}\n\nfunction _x86Rotl(m, n) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n  return m << n | m >>> 32 - n;\n}\n\nfunction _x86Fmix(h) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n  h ^= h >>> 16;\n  h = _x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = _x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n} // PUBLIC FUNCTIONS\n// ----------------\n\n\nfunction hash32(key, seed) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  key = key || '';\n  seed = seed || 0;\n  var remainder = key.length % 4;\n  var bytes = key.length - remainder;\n  var h1 = seed;\n  var k1 = 0;\n  var c1 = 0xcc9e2d51;\n  var c2 = 0x1b873593;\n\n  for (var i = 0; i < bytes; i = i + 4) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n    k1 = _x86Multiply(k1, c1);\n    k1 = _x86Rotl(k1, 15);\n    k1 = _x86Multiply(k1, c2);\n    h1 ^= k1;\n    h1 = _x86Rotl(h1, 13);\n    h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 = _x86Fmix(h1);\n  return h1 >>> 0;\n}\n\nfunction hash(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return hash32(UTF16ToUTF8(str), seed >>> 0);\n}\n\nfunction bucket(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return Math.abs(hash(str, seed) % 100) + 1;\n}\n\nexport default {\n  hash: hash,\n  bucket: bucket\n};","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/engine/engine/murmur3.js"],"names":["utfx","stringSource","stringDestination","encodeUTF16toUTF8","UTF16ToUTF8","key","sd","_x86Multiply","m","n","_x86Rotl","_x86Fmix","h","hash32","seed","remainder","length","bytes","h1","k1","c1","c2","i","charCodeAt","hash","str","bucket","Math","abs"],"mappings":"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","sourcesContent":["/* eslint-disable no-fallthrough */\nimport utfx from 'utfx';\nvar stringSource = utfx.stringSource;\nvar stringDestination = utfx.stringDestination;\nvar encodeUTF16toUTF8 = utfx.encodeUTF16toUTF8;\n\nfunction UTF16ToUTF8(key) {\n  var sd;\n  encodeUTF16toUTF8(stringSource(key), sd = stringDestination());\n  return sd();\n} // +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n// PRIVATE FUNCTIONS\n// -----------------\n\n\nfunction _x86Multiply(m, n) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n  return (m & 0xffff) * n + (((m >>> 16) * n & 0xffff) << 16);\n}\n\nfunction _x86Rotl(m, n) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n  return m << n | m >>> 32 - n;\n}\n\nfunction _x86Fmix(h) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n  h ^= h >>> 16;\n  h = _x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = _x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n  return h;\n} // PUBLIC FUNCTIONS\n// ----------------\n\n\nfunction hash32(key, seed) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  key = key || '';\n  seed = seed || 0;\n  var remainder = key.length % 4;\n  var bytes = key.length - remainder;\n  var h1 = seed;\n  var k1 = 0;\n  var c1 = 0xcc9e2d51;\n  var c2 = 0x1b873593;\n\n  for (var i = 0; i < bytes; i = i + 4) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24;\n    k1 = _x86Multiply(k1, c1);\n    k1 = _x86Rotl(k1, 15);\n    k1 = _x86Multiply(k1, c2);\n    h1 ^= k1;\n    h1 = _x86Rotl(h1, 13);\n    h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 = _x86Fmix(h1);\n  return h1 >>> 0;\n}\n\nfunction hash(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return hash32(UTF16ToUTF8(str), seed >>> 0);\n}\n\nfunction bucket(str\n/*: string */\n, seed\n/*: number */\n)\n/*: number */\n{\n  return Math.abs(hash(str, seed) % 100) + 1;\n}\n\nexport default {\n  hash: hash,\n  bucket: bucket\n};"]},"metadata":{},"sourceType":"module"}