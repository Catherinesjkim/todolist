{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport { uniq } from '../lang';\nimport logFactory from '../logger';\nimport { validateSplit } from './split';\nvar log = logFactory('', {\n  displayAllErrors: true\n});\nexport function validateSplits(maybeSplits, method) {\n  if (_Array$isArray(maybeSplits) && maybeSplits.length > 0) {\n    var validatedArray = []; // Remove invalid values\n\n    _forEachInstanceProperty(maybeSplits).call(maybeSplits, function (maybeSplit) {\n      var splitName = validateSplit(maybeSplit);\n      if (splitName) validatedArray.push(splitName);\n    }); // Strip off duplicated values if we have valid split names then return\n\n\n    if (validatedArray.length) return uniq(validatedArray);\n  }\n\n  log.error(\"\".concat(method, \": split_names must be a non-empty array.\"));\n  return false;\n}","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/utils/inputValidation/splits.js"],"names":["_forEachInstanceProperty","_Array$isArray","uniq","logFactory","validateSplit","log","displayAllErrors","validateSplits","maybeSplits","method","length","validatedArray","call","maybeSplit","splitName","push","error","concat"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,yDAArC;AACA,OAAOC,cAAP,MAA2B,sDAA3B;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,IAAIC,GAAG,GAAGF,UAAU,CAAC,EAAD,EAAK;AACvBG,EAAAA,gBAAgB,EAAE;AADK,CAAL,CAApB;AAGA,OAAO,SAASC,cAAT,CAAwBC,WAAxB,EAAqCC,MAArC,EAA6C;AAClD,MAAIR,cAAc,CAACO,WAAD,CAAd,IAA+BA,WAAW,CAACE,MAAZ,GAAqB,CAAxD,EAA2D;AACzD,QAAIC,cAAc,GAAG,EAArB,CADyD,CAChC;;AAEzBX,IAAAA,wBAAwB,CAACQ,WAAD,CAAxB,CAAsCI,IAAtC,CAA2CJ,WAA3C,EAAwD,UAAUK,UAAV,EAAsB;AAC5E,UAAIC,SAAS,GAAGV,aAAa,CAACS,UAAD,CAA7B;AACA,UAAIC,SAAJ,EAAeH,cAAc,CAACI,IAAf,CAAoBD,SAApB;AAChB,KAHD,EAHyD,CAMrD;;;AAGJ,QAAIH,cAAc,CAACD,MAAnB,EAA2B,OAAOR,IAAI,CAACS,cAAD,CAAX;AAC5B;;AAEDN,EAAAA,GAAG,CAACW,KAAJ,CAAU,GAAGC,MAAH,CAAUR,MAAV,EAAkB,0CAAlB,CAAV;AACA,SAAO,KAAP;AACD","sourcesContent":["import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport { uniq } from '../lang';\nimport logFactory from '../logger';\nimport { validateSplit } from './split';\nvar log = logFactory('', {\n  displayAllErrors: true\n});\nexport function validateSplits(maybeSplits, method) {\n  if (_Array$isArray(maybeSplits) && maybeSplits.length > 0) {\n    var validatedArray = []; // Remove invalid values\n\n    _forEachInstanceProperty(maybeSplits).call(maybeSplits, function (maybeSplit) {\n      var splitName = validateSplit(maybeSplit);\n      if (splitName) validatedArray.push(splitName);\n    }); // Strip off duplicated values if we have valid split names then return\n\n\n    if (validatedArray.length) return uniq(validatedArray);\n  }\n\n  log.error(\"\".concat(method, \": split_names must be a non-empty array.\"));\n  return false;\n}"]},"metadata":{},"sourceType":"module"}