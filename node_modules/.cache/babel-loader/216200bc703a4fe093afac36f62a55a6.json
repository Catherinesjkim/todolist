{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs3/core-js/get-iterator\";\nimport _Set from \"@babel/runtime-corejs3/core-js-stable/set\";\n/**\n * Collect segments from a raw split definition.\n */\n\nvar parseSegments = function parseSegments(conditions) {\n  var segments = new _Set();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(conditions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var condition = _step.value;\n      var matchers = condition.matcherGroup.matchers;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(matchers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var matcher = _step2.value;\n          var matcherType = matcher.matcherType,\n              userDefinedSegmentMatcherData = matcher.userDefinedSegmentMatcherData;\n\n          if (matcherType === 'IN_SEGMENT') {\n            segments.add(userDefinedSegmentMatcherData.segmentName);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return segments;\n};\n\nexport default parseSegments;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/engine/parser/segments.js"],"names":["_getIterator","_Set","parseSegments","conditions","segments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","_step","next","done","condition","value","matchers","matcherGroup","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","matcher","matcherType","userDefinedSegmentMatcherData","add","segmentName","err"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,6CAAzB;AACA,OAAOC,IAAP,MAAiB,2CAAjB;AAEA;;;;AAGA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACrD,MAAIC,QAAQ,GAAG,IAAIH,IAAJ,EAAf;AACA,MAAII,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGT,YAAY,CAACG,UAAD,CAA5B,EAA0CO,KAA/C,EAAsD,EAAEL,yBAAyB,GAAG,CAACK,KAAK,GAAGD,SAAS,CAACE,IAAV,EAAT,EAA2BC,IAAzD,CAAtD,EAAsHP,yBAAyB,GAAG,IAAlJ,EAAwJ;AACtJ,UAAIQ,SAAS,GAAGH,KAAK,CAACI,KAAtB;AACA,UAAIC,QAAQ,GAAGF,SAAS,CAACG,YAAV,CAAuBD,QAAtC;AACA,UAAIE,0BAA0B,GAAG,IAAjC;AACA,UAAIC,kBAAkB,GAAG,KAAzB;AACA,UAAIC,eAAe,GAAGX,SAAtB;;AAEA,UAAI;AACF,aAAK,IAAIY,UAAU,GAAGpB,YAAY,CAACe,QAAD,CAA7B,EAAyCM,MAA9C,EAAsD,EAAEJ,0BAA0B,GAAG,CAACI,MAAM,GAAGD,UAAU,CAACT,IAAX,EAAV,EAA6BC,IAA5D,CAAtD,EAAyHK,0BAA0B,GAAG,IAAtJ,EAA4J;AAC1J,cAAIK,OAAO,GAAGD,MAAM,CAACP,KAArB;AACA,cAAIS,WAAW,GAAGD,OAAO,CAACC,WAA1B;AAAA,cACIC,6BAA6B,GAAGF,OAAO,CAACE,6BAD5C;;AAGA,cAAID,WAAW,KAAK,YAApB,EAAkC;AAChCnB,YAAAA,QAAQ,CAACqB,GAAT,CAAaD,6BAA6B,CAACE,WAA3C;AACD;AACF;AACF,OAVD,CAUE,OAAOC,GAAP,EAAY;AACZT,QAAAA,kBAAkB,GAAG,IAArB;AACAC,QAAAA,eAAe,GAAGQ,GAAlB;AACD,OAbD,SAaU;AACR,YAAI;AACF,cAAI,CAACV,0BAAD,IAA+BG,UAAU,CAAC,QAAD,CAAV,IAAwB,IAA3D,EAAiE;AAC/DA,YAAAA,UAAU,CAAC,QAAD,CAAV;AACD;AACF,SAJD,SAIU;AACR,cAAIF,kBAAJ,EAAwB;AACtB,kBAAMC,eAAN;AACD;AACF;AACF;AACF;AACF,GAjCD,CAiCE,OAAOQ,GAAP,EAAY;AACZrB,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGoB,GAAjB;AACD,GApCD,SAoCU;AACR,QAAI;AACF,UAAI,CAACtB,yBAAD,IAA8BI,SAAS,CAAC,QAAD,CAAT,IAAuB,IAAzD,EAA+D;AAC7DA,QAAAA,SAAS,CAAC,QAAD,CAAT;AACD;AACF,KAJD,SAIU;AACR,UAAIH,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAOH,QAAP;AACD,CAvDD;;AAyDA,eAAeF,aAAf","sourcesContent":["import _getIterator from \"@babel/runtime-corejs3/core-js/get-iterator\";\nimport _Set from \"@babel/runtime-corejs3/core-js-stable/set\";\n\n/**\n * Collect segments from a raw split definition.\n */\nvar parseSegments = function parseSegments(conditions) {\n  var segments = new _Set();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(conditions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var condition = _step.value;\n      var matchers = condition.matcherGroup.matchers;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(matchers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var matcher = _step2.value;\n          var matcherType = matcher.matcherType,\n              userDefinedSegmentMatcherData = matcher.userDefinedSegmentMatcherData;\n\n          if (matcherType === 'IN_SEGMENT') {\n            segments.add(userDefinedSegmentMatcherData.segmentName);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return segments;\n};\n\nexport default parseSegments;"]},"metadata":{},"sourceType":"module"}