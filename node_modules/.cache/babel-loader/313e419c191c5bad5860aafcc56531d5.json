{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _classCallCheck from \"@babel/runtime-corejs3/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs3/helpers/esm/createClass\";\nimport { startsWith } from '../utils/lang';\nvar everythingAtTheEnd = /[^.]+$/;\nvar everythingAfterCount = /count\\.([^/]+)$/;\nvar latencyMetricNameAndBucket = /latency\\.([^/]+)\\.bucket\\.([0-9]+)$/;\n\nvar KeyBuilder = /*#__PURE__*/function () {\n  function KeyBuilder(settings) {\n    _classCallCheck(this, KeyBuilder);\n\n    this.settings = settings;\n  }\n\n  _createClass(KeyBuilder, [{\n    key: \"buildSplitKey\",\n    value: function buildSplitKey(splitName) {\n      var _context;\n\n      return _concatInstanceProperty(_context = \"\".concat(this.settings.storage.prefix, \".split.\")).call(_context, splitName);\n    }\n  }, {\n    key: \"buildTrafficTypeKey\",\n    value: function buildTrafficTypeKey(trafficType) {\n      var _context2;\n\n      return _concatInstanceProperty(_context2 = \"\".concat(this.settings.storage.prefix, \".trafficType.\")).call(_context2, trafficType);\n    }\n  }, {\n    key: \"buildSplitsTillKey\",\n    value: function buildSplitsTillKey() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.till\");\n    }\n  }, {\n    key: \"buildSplitsReady\",\n    value: function buildSplitsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.ready\");\n    }\n  }, {\n    key: \"isSplitKey\",\n    value: function isSplitKey(key) {\n      return startsWith(key, \"\".concat(this.settings.storage.prefix, \".split.\"));\n    }\n  }, {\n    key: \"buildSegmentNameKey\",\n    value: function buildSegmentNameKey(segmentName) {\n      var _context3;\n\n      return _concatInstanceProperty(_context3 = \"\".concat(this.settings.storage.prefix, \".segment.\")).call(_context3, segmentName);\n    }\n  }, {\n    key: \"buildSegmentTillKey\",\n    value: function buildSegmentTillKey(segmentName) {\n      var _context4;\n\n      return _concatInstanceProperty(_context4 = \"\".concat(this.settings.storage.prefix, \".segment.\")).call(_context4, segmentName, \".till\");\n    }\n  }, {\n    key: \"buildRegisteredSegmentsKey\",\n    value: function buildRegisteredSegmentsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.registered\");\n    }\n  }, {\n    key: \"buildSegmentsReady\",\n    value: function buildSegmentsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.ready\");\n    }\n  }, {\n    key: \"buildVersionablePrefix\",\n    value: function buildVersionablePrefix() {\n      var _context5, _context6;\n\n      return _concatInstanceProperty(_context5 = _concatInstanceProperty(_context6 = \"\".concat(this.settings.storage.prefix, \"/\")).call(_context6, this.settings.version, \"/\")).call(_context5, this.settings.runtime.ip);\n    }\n  }, {\n    key: \"buildImpressionsKey\",\n    value: function buildImpressionsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".impressions\");\n    }\n  }, {\n    key: \"buildEventsKey\",\n    value: function buildEventsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".events\");\n    }\n  }, {\n    key: \"buildLatencyKeyPrefix\",\n    value: function buildLatencyKeyPrefix() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/latency\");\n    }\n  }, {\n    key: \"buildLatencyKey\",\n    value: function buildLatencyKey(metricName, bucketNumber) {\n      var _context7, _context8;\n\n      return _concatInstanceProperty(_context7 = _concatInstanceProperty(_context8 = \"\".concat(this.buildLatencyKeyPrefix(), \".\")).call(_context8, metricName, \".bucket.\")).call(_context7, bucketNumber);\n    }\n  }, {\n    key: \"buildCountKey\",\n    value: function buildCountKey(metricName) {\n      var _context9;\n\n      return _concatInstanceProperty(_context9 = \"\".concat(this.buildVersionablePrefix(), \"/count.\")).call(_context9, metricName);\n    }\n  }, {\n    key: \"buildGaugeKey\",\n    value: function buildGaugeKey(metricName) {\n      var _context10;\n\n      return _concatInstanceProperty(_context10 = \"\".concat(this.buildVersionablePrefix(), \"/gauge.\")).call(_context10, metricName);\n    }\n  }, {\n    key: \"searchPatternForCountKeys\",\n    value: function searchPatternForCountKeys() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/count.*\");\n    }\n  }, {\n    key: \"searchPatternForSplitKeys\",\n    value: function searchPatternForSplitKeys() {\n      return \"\".concat(this.settings.storage.prefix, \".split.*\");\n    }\n  }, {\n    key: \"searchPatternForLatency\",\n    value: function searchPatternForLatency() {\n      return \"\".concat(this.buildLatencyKeyPrefix(), \".*\");\n    }\n  }, {\n    key: \"extractKey\",\n    value: function extractKey(builtKey) {\n      var s = builtKey.match(everythingAtTheEnd);\n\n      if (s && s.length) {\n        return s[0];\n      } else {\n        throw 'Invalid latency key provided';\n      }\n    }\n  }, {\n    key: \"extractCounterName\",\n    value: function extractCounterName(counterKey) {\n      var m = counterKey.match(everythingAfterCount);\n\n      if (m && m.length) {\n        return m[1]; // everything after count\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }, {\n    key: \"extractLatencyMetricNameAndBucket\",\n    value: function extractLatencyMetricNameAndBucket(latencyKey) {\n      var parts = latencyKey.match(latencyMetricNameAndBucket);\n\n      if (parts && parts.length > 2) {\n        return {\n          metricName: parts[1],\n          bucketNumber: parts[2]\n        };\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }]);\n\n  return KeyBuilder;\n}();\n\nexport default KeyBuilder;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/storage/Keys.js"],"names":["_concatInstanceProperty","_classCallCheck","_createClass","startsWith","everythingAtTheEnd","everythingAfterCount","latencyMetricNameAndBucket","KeyBuilder","settings","key","value","buildSplitKey","splitName","_context","concat","storage","prefix","call","buildTrafficTypeKey","trafficType","_context2","buildSplitsTillKey","buildSplitsReady","isSplitKey","buildSegmentNameKey","segmentName","_context3","buildSegmentTillKey","_context4","buildRegisteredSegmentsKey","buildSegmentsReady","buildVersionablePrefix","_context5","_context6","version","runtime","ip","buildImpressionsKey","buildEventsKey","buildLatencyKeyPrefix","buildLatencyKey","metricName","bucketNumber","_context7","_context8","buildCountKey","_context9","buildGaugeKey","_context10","searchPatternForCountKeys","searchPatternForSplitKeys","searchPatternForLatency","extractKey","builtKey","s","match","length","extractCounterName","counterKey","m","extractLatencyMetricNameAndBucket","latencyKey","parts"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,IAAIC,kBAAkB,GAAG,QAAzB;AACA,IAAIC,oBAAoB,GAAG,iBAA3B;AACA,IAAIC,0BAA0B,GAAG,qCAAjC;;AAEA,IAAIC,UAAU,GACd,aACA,YAAY;AACV,WAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC5BP,IAAAA,eAAe,CAAC,IAAD,EAAOM,UAAP,CAAf;;AAEA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAEDN,EAAAA,YAAY,CAACK,UAAD,EAAa,CAAC;AACxBE,IAAAA,GAAG,EAAE,eADmB;AAExBC,IAAAA,KAAK,EAAE,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AACvC,UAAIC,QAAJ;;AAEA,aAAOb,uBAAuB,CAACa,QAAQ,GAAG,GAAGC,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,SAAxC,CAAZ,CAAvB,CAAuFC,IAAvF,CAA4FJ,QAA5F,EAAsGD,SAAtG,CAAP;AACD;AANuB,GAAD,EAOtB;AACDH,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASQ,mBAAT,CAA6BC,WAA7B,EAA0C;AAC/C,UAAIC,SAAJ;;AAEA,aAAOpB,uBAAuB,CAACoB,SAAS,GAAG,GAAGN,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,eAAxC,CAAb,CAAvB,CAA8FC,IAA9F,CAAmGG,SAAnG,EAA8GD,WAA9G,CAAP;AACD;AANA,GAPsB,EActB;AACDV,IAAAA,GAAG,EAAE,oBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASW,kBAAT,GAA8B;AACnC,aAAO,GAAGP,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,cAAxC,CAAP;AACD;AAJA,GAdsB,EAmBtB;AACDP,IAAAA,GAAG,EAAE,kBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASY,gBAAT,GAA4B;AACjC,aAAO,GAAGR,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,eAAxC,CAAP;AACD;AAJA,GAnBsB,EAwBtB;AACDP,IAAAA,GAAG,EAAE,YADJ;AAEDC,IAAAA,KAAK,EAAE,SAASa,UAAT,CAAoBd,GAApB,EAAyB;AAC9B,aAAON,UAAU,CAACM,GAAD,EAAM,GAAGK,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,SAAxC,CAAN,CAAjB;AACD;AAJA,GAxBsB,EA6BtB;AACDP,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASc,mBAAT,CAA6BC,WAA7B,EAA0C;AAC/C,UAAIC,SAAJ;;AAEA,aAAO1B,uBAAuB,CAAC0B,SAAS,GAAG,GAAGZ,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,WAAxC,CAAb,CAAvB,CAA0FC,IAA1F,CAA+FS,SAA/F,EAA0GD,WAA1G,CAAP;AACD;AANA,GA7BsB,EAoCtB;AACDhB,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASiB,mBAAT,CAA6BF,WAA7B,EAA0C;AAC/C,UAAIG,SAAJ;;AAEA,aAAO5B,uBAAuB,CAAC4B,SAAS,GAAG,GAAGd,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,WAAxC,CAAb,CAAvB,CAA0FC,IAA1F,CAA+FW,SAA/F,EAA0GH,WAA1G,EAAuH,OAAvH,CAAP;AACD;AANA,GApCsB,EA2CtB;AACDhB,IAAAA,GAAG,EAAE,4BADJ;AAEDC,IAAAA,KAAK,EAAE,SAASmB,0BAAT,GAAsC;AAC3C,aAAO,GAAGf,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,sBAAxC,CAAP;AACD;AAJA,GA3CsB,EAgDtB;AACDP,IAAAA,GAAG,EAAE,oBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASoB,kBAAT,GAA8B;AACnC,aAAO,GAAGhB,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,iBAAxC,CAAP;AACD;AAJA,GAhDsB,EAqDtB;AACDP,IAAAA,GAAG,EAAE,wBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASqB,sBAAT,GAAkC;AACvC,UAAIC,SAAJ,EAAeC,SAAf;;AAEA,aAAOjC,uBAAuB,CAACgC,SAAS,GAAGhC,uBAAuB,CAACiC,SAAS,GAAG,GAAGnB,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,GAAxC,CAAb,CAAvB,CAAkFC,IAAlF,CAAuFgB,SAAvF,EAAkG,KAAKzB,QAAL,CAAc0B,OAAhH,EAAyH,GAAzH,CAAb,CAAvB,CAAmKjB,IAAnK,CAAwKe,SAAxK,EAAmL,KAAKxB,QAAL,CAAc2B,OAAd,CAAsBC,EAAzM,CAAP;AACD;AANA,GArDsB,EA4DtB;AACD3B,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS2B,mBAAT,GAA+B;AACpC,aAAO,GAAGvB,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,cAAxC,CAAP;AACD;AAJA,GA5DsB,EAiEtB;AACDP,IAAAA,GAAG,EAAE,gBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS4B,cAAT,GAA0B;AAC/B,aAAO,GAAGxB,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,SAAxC,CAAP;AACD;AAJA,GAjEsB,EAsEtB;AACDP,IAAAA,GAAG,EAAE,uBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS6B,qBAAT,GAAiC;AACtC,aAAO,GAAGzB,MAAH,CAAU,KAAKiB,sBAAL,EAAV,EAAyC,UAAzC,CAAP;AACD;AAJA,GAtEsB,EA2EtB;AACDtB,IAAAA,GAAG,EAAE,iBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS8B,eAAT,CAAyBC,UAAzB,EAAqCC,YAArC,EAAmD;AACxD,UAAIC,SAAJ,EAAeC,SAAf;;AAEA,aAAO5C,uBAAuB,CAAC2C,SAAS,GAAG3C,uBAAuB,CAAC4C,SAAS,GAAG,GAAG9B,MAAH,CAAU,KAAKyB,qBAAL,EAAV,EAAwC,GAAxC,CAAb,CAAvB,CAAkFtB,IAAlF,CAAuF2B,SAAvF,EAAkGH,UAAlG,EAA8G,UAA9G,CAAb,CAAvB,CAA+JxB,IAA/J,CAAoK0B,SAApK,EAA+KD,YAA/K,CAAP;AACD;AANA,GA3EsB,EAkFtB;AACDjC,IAAAA,GAAG,EAAE,eADJ;AAEDC,IAAAA,KAAK,EAAE,SAASmC,aAAT,CAAuBJ,UAAvB,EAAmC;AACxC,UAAIK,SAAJ;;AAEA,aAAO9C,uBAAuB,CAAC8C,SAAS,GAAG,GAAGhC,MAAH,CAAU,KAAKiB,sBAAL,EAAV,EAAyC,SAAzC,CAAb,CAAvB,CAAyFd,IAAzF,CAA8F6B,SAA9F,EAAyGL,UAAzG,CAAP;AACD;AANA,GAlFsB,EAyFtB;AACDhC,IAAAA,GAAG,EAAE,eADJ;AAEDC,IAAAA,KAAK,EAAE,SAASqC,aAAT,CAAuBN,UAAvB,EAAmC;AACxC,UAAIO,UAAJ;;AAEA,aAAOhD,uBAAuB,CAACgD,UAAU,GAAG,GAAGlC,MAAH,CAAU,KAAKiB,sBAAL,EAAV,EAAyC,SAAzC,CAAd,CAAvB,CAA0Fd,IAA1F,CAA+F+B,UAA/F,EAA2GP,UAA3G,CAAP;AACD;AANA,GAzFsB,EAgGtB;AACDhC,IAAAA,GAAG,EAAE,2BADJ;AAEDC,IAAAA,KAAK,EAAE,SAASuC,yBAAT,GAAqC;AAC1C,aAAO,GAAGnC,MAAH,CAAU,KAAKiB,sBAAL,EAAV,EAAyC,UAAzC,CAAP;AACD;AAJA,GAhGsB,EAqGtB;AACDtB,IAAAA,GAAG,EAAE,2BADJ;AAEDC,IAAAA,KAAK,EAAE,SAASwC,yBAAT,GAAqC;AAC1C,aAAO,GAAGpC,MAAH,CAAU,KAAKN,QAAL,CAAcO,OAAd,CAAsBC,MAAhC,EAAwC,UAAxC,CAAP;AACD;AAJA,GArGsB,EA0GtB;AACDP,IAAAA,GAAG,EAAE,yBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASyC,uBAAT,GAAmC;AACxC,aAAO,GAAGrC,MAAH,CAAU,KAAKyB,qBAAL,EAAV,EAAwC,IAAxC,CAAP;AACD;AAJA,GA1GsB,EA+GtB;AACD9B,IAAAA,GAAG,EAAE,YADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS0C,UAAT,CAAoBC,QAApB,EAA8B;AACnC,UAAIC,CAAC,GAAGD,QAAQ,CAACE,KAAT,CAAenD,kBAAf,CAAR;;AAEA,UAAIkD,CAAC,IAAIA,CAAC,CAACE,MAAX,EAAmB;AACjB,eAAOF,CAAC,CAAC,CAAD,CAAR;AACD,OAFD,MAEO;AACL,cAAM,8BAAN;AACD;AACF;AAVA,GA/GsB,EA0HtB;AACD7C,IAAAA,GAAG,EAAE,oBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS+C,kBAAT,CAA4BC,UAA5B,EAAwC;AAC7C,UAAIC,CAAC,GAAGD,UAAU,CAACH,KAAX,CAAiBlD,oBAAjB,CAAR;;AAEA,UAAIsD,CAAC,IAAIA,CAAC,CAACH,MAAX,EAAmB;AACjB,eAAOG,CAAC,CAAC,CAAD,CAAR,CADiB,CACJ;AACd,OAFD,MAEO;AACL,cAAM,8BAAN;AACD;AACF;AAVA,GA1HsB,EAqItB;AACDlD,IAAAA,GAAG,EAAE,mCADJ;AAEDC,IAAAA,KAAK,EAAE,SAASkD,iCAAT,CAA2CC,UAA3C,EAAuD;AAC5D,UAAIC,KAAK,GAAGD,UAAU,CAACN,KAAX,CAAiBjD,0BAAjB,CAAZ;;AAEA,UAAIwD,KAAK,IAAIA,KAAK,CAACN,MAAN,GAAe,CAA5B,EAA+B;AAC7B,eAAO;AACLf,UAAAA,UAAU,EAAEqB,KAAK,CAAC,CAAD,CADZ;AAELpB,UAAAA,YAAY,EAAEoB,KAAK,CAAC,CAAD;AAFd,SAAP;AAID,OALD,MAKO;AACL,cAAM,8BAAN;AACD;AACF;AAbA,GArIsB,CAAb,CAAZ;;AAqJA,SAAOvD,UAAP;AACD,CA7JD,EAFA;;AAiKA,eAAeA,UAAf","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _classCallCheck from \"@babel/runtime-corejs3/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs3/helpers/esm/createClass\";\nimport { startsWith } from '../utils/lang';\nvar everythingAtTheEnd = /[^.]+$/;\nvar everythingAfterCount = /count\\.([^/]+)$/;\nvar latencyMetricNameAndBucket = /latency\\.([^/]+)\\.bucket\\.([0-9]+)$/;\n\nvar KeyBuilder =\n/*#__PURE__*/\nfunction () {\n  function KeyBuilder(settings) {\n    _classCallCheck(this, KeyBuilder);\n\n    this.settings = settings;\n  }\n\n  _createClass(KeyBuilder, [{\n    key: \"buildSplitKey\",\n    value: function buildSplitKey(splitName) {\n      var _context;\n\n      return _concatInstanceProperty(_context = \"\".concat(this.settings.storage.prefix, \".split.\")).call(_context, splitName);\n    }\n  }, {\n    key: \"buildTrafficTypeKey\",\n    value: function buildTrafficTypeKey(trafficType) {\n      var _context2;\n\n      return _concatInstanceProperty(_context2 = \"\".concat(this.settings.storage.prefix, \".trafficType.\")).call(_context2, trafficType);\n    }\n  }, {\n    key: \"buildSplitsTillKey\",\n    value: function buildSplitsTillKey() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.till\");\n    }\n  }, {\n    key: \"buildSplitsReady\",\n    value: function buildSplitsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".splits.ready\");\n    }\n  }, {\n    key: \"isSplitKey\",\n    value: function isSplitKey(key) {\n      return startsWith(key, \"\".concat(this.settings.storage.prefix, \".split.\"));\n    }\n  }, {\n    key: \"buildSegmentNameKey\",\n    value: function buildSegmentNameKey(segmentName) {\n      var _context3;\n\n      return _concatInstanceProperty(_context3 = \"\".concat(this.settings.storage.prefix, \".segment.\")).call(_context3, segmentName);\n    }\n  }, {\n    key: \"buildSegmentTillKey\",\n    value: function buildSegmentTillKey(segmentName) {\n      var _context4;\n\n      return _concatInstanceProperty(_context4 = \"\".concat(this.settings.storage.prefix, \".segment.\")).call(_context4, segmentName, \".till\");\n    }\n  }, {\n    key: \"buildRegisteredSegmentsKey\",\n    value: function buildRegisteredSegmentsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.registered\");\n    }\n  }, {\n    key: \"buildSegmentsReady\",\n    value: function buildSegmentsReady() {\n      return \"\".concat(this.settings.storage.prefix, \".segments.ready\");\n    }\n  }, {\n    key: \"buildVersionablePrefix\",\n    value: function buildVersionablePrefix() {\n      var _context5, _context6;\n\n      return _concatInstanceProperty(_context5 = _concatInstanceProperty(_context6 = \"\".concat(this.settings.storage.prefix, \"/\")).call(_context6, this.settings.version, \"/\")).call(_context5, this.settings.runtime.ip);\n    }\n  }, {\n    key: \"buildImpressionsKey\",\n    value: function buildImpressionsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".impressions\");\n    }\n  }, {\n    key: \"buildEventsKey\",\n    value: function buildEventsKey() {\n      return \"\".concat(this.settings.storage.prefix, \".events\");\n    }\n  }, {\n    key: \"buildLatencyKeyPrefix\",\n    value: function buildLatencyKeyPrefix() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/latency\");\n    }\n  }, {\n    key: \"buildLatencyKey\",\n    value: function buildLatencyKey(metricName, bucketNumber) {\n      var _context7, _context8;\n\n      return _concatInstanceProperty(_context7 = _concatInstanceProperty(_context8 = \"\".concat(this.buildLatencyKeyPrefix(), \".\")).call(_context8, metricName, \".bucket.\")).call(_context7, bucketNumber);\n    }\n  }, {\n    key: \"buildCountKey\",\n    value: function buildCountKey(metricName) {\n      var _context9;\n\n      return _concatInstanceProperty(_context9 = \"\".concat(this.buildVersionablePrefix(), \"/count.\")).call(_context9, metricName);\n    }\n  }, {\n    key: \"buildGaugeKey\",\n    value: function buildGaugeKey(metricName) {\n      var _context10;\n\n      return _concatInstanceProperty(_context10 = \"\".concat(this.buildVersionablePrefix(), \"/gauge.\")).call(_context10, metricName);\n    }\n  }, {\n    key: \"searchPatternForCountKeys\",\n    value: function searchPatternForCountKeys() {\n      return \"\".concat(this.buildVersionablePrefix(), \"/count.*\");\n    }\n  }, {\n    key: \"searchPatternForSplitKeys\",\n    value: function searchPatternForSplitKeys() {\n      return \"\".concat(this.settings.storage.prefix, \".split.*\");\n    }\n  }, {\n    key: \"searchPatternForLatency\",\n    value: function searchPatternForLatency() {\n      return \"\".concat(this.buildLatencyKeyPrefix(), \".*\");\n    }\n  }, {\n    key: \"extractKey\",\n    value: function extractKey(builtKey) {\n      var s = builtKey.match(everythingAtTheEnd);\n\n      if (s && s.length) {\n        return s[0];\n      } else {\n        throw 'Invalid latency key provided';\n      }\n    }\n  }, {\n    key: \"extractCounterName\",\n    value: function extractCounterName(counterKey) {\n      var m = counterKey.match(everythingAfterCount);\n\n      if (m && m.length) {\n        return m[1]; // everything after count\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }, {\n    key: \"extractLatencyMetricNameAndBucket\",\n    value: function extractLatencyMetricNameAndBucket(latencyKey) {\n      var parts = latencyKey.match(latencyMetricNameAndBucket);\n\n      if (parts && parts.length > 2) {\n        return {\n          metricName: parts[1],\n          bucketNumber: parts[2]\n        };\n      } else {\n        throw 'Invalid counter key provided';\n      }\n    }\n  }]);\n\n  return KeyBuilder;\n}();\n\nexport default KeyBuilder;"]},"metadata":{},"sourceType":"module"}