{"ast":null,"code":"import _trimInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/trim\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport { isString } from '../lang';\nimport { SPLIT_NOT_FOUND } from '../labels';\nimport logFactory from '../logger';\nvar log = logFactory('', {\n  displayAllErrors: true\n}); // include BOM and nbsp\n\nvar TRIMMABLE_SPACES_REGEX = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/;\nexport function validateSplit(maybeSplit, method) {\n  if (maybeSplit == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined split name, split name must be a non-empty string.\"));\n  } else if (!isString(maybeSplit)) {\n    log.error(\"\".concat(method, \": you passed an invalid split name, split name must be a non-empty string.\"));\n  } else {\n    if (TRIMMABLE_SPACES_REGEX.test(maybeSplit)) {\n      var _context;\n\n      log.warn(_concatInstanceProperty(_context = \"\".concat(method, \": split name \\\"\")).call(_context, maybeSplit, \"\\\" has extra whitespace, trimming.\"));\n      maybeSplit = _trimInstanceProperty(maybeSplit).call(maybeSplit);\n    }\n\n    if (maybeSplit.length > 0) {\n      return maybeSplit;\n    } else {\n      log.error(\"\".concat(method, \": you passed an empty split name, split name must be a non-empty string.\"));\n    }\n  }\n\n  return false;\n}\n/**\n * This is defined here and in this format mostly because of the logger and the fact that it's considered a validation at product level.\n * But it's not going to run on the input validation layer. In any case, the most compeling reason to use it as we do is to avoid going to Redis and get a split twice.\n */\n\nexport function validateSplitExistance(context, splitName, labelOrSplitObj, method) {\n  if (context.get(context.constants.READY, true)) {\n    // Only if it's ready we validate this, otherwise it may just be that the SDK is not ready yet.\n    if (labelOrSplitObj === SPLIT_NOT_FOUND || labelOrSplitObj == null) {\n      var _context2;\n\n      log.warn(_concatInstanceProperty(_context2 = \"\".concat(method, \": you passed \\\"\")).call(_context2, splitName, \"\\\" that does not exist in this environment, please double check what Splits exist in the web console.\"));\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/utils/inputValidation/split.js"],"names":["_trimInstanceProperty","_concatInstanceProperty","isString","SPLIT_NOT_FOUND","logFactory","log","displayAllErrors","TRIMMABLE_SPACES_REGEX","validateSplit","maybeSplit","method","undefined","error","concat","test","_context","warn","call","length","validateSplitExistance","context","splitName","labelOrSplitObj","get","constants","READY","_context2"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,qDAAlC;AACA,OAAOC,uBAAP,MAAoC,uDAApC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,EAAD,EAAK;AACvBE,EAAAA,gBAAgB,EAAE;AADK,CAAL,CAApB,C,CAEI;;AAEJ,IAAIC,sBAAsB,GAAG,mCAA7B;AACA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,MAAnC,EAA2C;AAChD,MAAID,UAAU,IAAIE,SAAlB,EAA6B;AAC3B;AACAN,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,qFAAlB,CAAV;AACD,GAHD,MAGO,IAAI,CAACR,QAAQ,CAACO,UAAD,CAAb,EAA2B;AAChCJ,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,4EAAlB,CAAV;AACD,GAFM,MAEA;AACL,QAAIH,sBAAsB,CAACO,IAAvB,CAA4BL,UAA5B,CAAJ,EAA6C;AAC3C,UAAIM,QAAJ;;AAEAV,MAAAA,GAAG,CAACW,IAAJ,CAASf,uBAAuB,CAACc,QAAQ,GAAG,GAAGF,MAAH,CAAUH,MAAV,EAAkB,iBAAlB,CAAZ,CAAvB,CAAyEO,IAAzE,CAA8EF,QAA9E,EAAwFN,UAAxF,EAAoG,oCAApG,CAAT;AACAA,MAAAA,UAAU,GAAGT,qBAAqB,CAACS,UAAD,CAArB,CAAkCQ,IAAlC,CAAuCR,UAAvC,CAAb;AACD;;AAED,QAAIA,UAAU,CAACS,MAAX,GAAoB,CAAxB,EAA2B;AACzB,aAAOT,UAAP;AACD,KAFD,MAEO;AACLJ,MAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,0EAAlB,CAAV;AACD;AACF;;AAED,SAAO,KAAP;AACD;AACD;;;;;AAKA,OAAO,SAASS,sBAAT,CAAgCC,OAAhC,EAAyCC,SAAzC,EAAoDC,eAApD,EAAqEZ,MAArE,EAA6E;AAClF,MAAIU,OAAO,CAACG,GAAR,CAAYH,OAAO,CAACI,SAAR,CAAkBC,KAA9B,EAAqC,IAArC,CAAJ,EAAgD;AAC9C;AACA,QAAIH,eAAe,KAAKnB,eAApB,IAAuCmB,eAAe,IAAI,IAA9D,EAAoE;AAClE,UAAII,SAAJ;;AAEArB,MAAAA,GAAG,CAACW,IAAJ,CAASf,uBAAuB,CAACyB,SAAS,GAAG,GAAGb,MAAH,CAAUH,MAAV,EAAkB,iBAAlB,CAAb,CAAvB,CAA0EO,IAA1E,CAA+ES,SAA/E,EAA0FL,SAA1F,EAAqG,uGAArG,CAAT;AACA,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["import _trimInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/trim\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport { isString } from '../lang';\nimport { SPLIT_NOT_FOUND } from '../labels';\nimport logFactory from '../logger';\nvar log = logFactory('', {\n  displayAllErrors: true\n}); // include BOM and nbsp\n\nvar TRIMMABLE_SPACES_REGEX = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/;\nexport function validateSplit(maybeSplit, method) {\n  if (maybeSplit == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined split name, split name must be a non-empty string.\"));\n  } else if (!isString(maybeSplit)) {\n    log.error(\"\".concat(method, \": you passed an invalid split name, split name must be a non-empty string.\"));\n  } else {\n    if (TRIMMABLE_SPACES_REGEX.test(maybeSplit)) {\n      var _context;\n\n      log.warn(_concatInstanceProperty(_context = \"\".concat(method, \": split name \\\"\")).call(_context, maybeSplit, \"\\\" has extra whitespace, trimming.\"));\n      maybeSplit = _trimInstanceProperty(maybeSplit).call(maybeSplit);\n    }\n\n    if (maybeSplit.length > 0) {\n      return maybeSplit;\n    } else {\n      log.error(\"\".concat(method, \": you passed an empty split name, split name must be a non-empty string.\"));\n    }\n  }\n\n  return false;\n}\n/**\n * This is defined here and in this format mostly because of the logger and the fact that it's considered a validation at product level.\n * But it's not going to run on the input validation layer. In any case, the most compeling reason to use it as we do is to avoid going to Redis and get a split twice.\n */\n\nexport function validateSplitExistance(context, splitName, labelOrSplitObj, method) {\n  if (context.get(context.constants.READY, true)) {\n    // Only if it's ready we validate this, otherwise it may just be that the SDK is not ready yet.\n    if (labelOrSplitObj === SPLIT_NOT_FOUND || labelOrSplitObj == null) {\n      var _context2;\n\n      log.warn(_concatInstanceProperty(_context2 = \"\".concat(method, \": you passed \\\"\")).call(_context2, splitName, \"\\\" that does not exist in this environment, please double check what Splits exist in the web console.\"));\n      return false;\n    }\n  }\n\n  return true;\n}"]},"metadata":{},"sourceType":"module"}