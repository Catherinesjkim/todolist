{"ast":null,"code":"import _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";\nimport { isString } from '../../../utils/lang';\nexport default function parseCondition(data) {\n  var treatment = data.treatment;\n\n  if (_keysInstanceProperty(data)) {\n    return {\n      conditionType: 'WHITELIST',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'WHITELIST',\n          negate: false,\n          whitelistMatcherData: {\n            whitelist: isString(_keysInstanceProperty(data)) ? [_keysInstanceProperty(data)] : _keysInstanceProperty(data)\n          }\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: \"whitelisted \".concat(treatment)\n    };\n  } else {\n    return {\n      conditionType: 'ROLLOUT',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'ALL_KEYS',\n          negate: false\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: 'default rule'\n    };\n  }\n}","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/services/splitChanges/offline/parseCondition.js"],"names":["_keysInstanceProperty","isString","parseCondition","data","treatment","conditionType","matcherGroup","combiner","matchers","keySelector","matcherType","negate","whitelistMatcherData","whitelist","partitions","size","label","concat"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,qDAAlC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;;AAEA,MAAIJ,qBAAqB,CAACG,IAAD,CAAzB,EAAiC;AAC/B,WAAO;AACLE,MAAAA,aAAa,EAAE,WADV;AAELC,MAAAA,YAAY,EAAE;AACZC,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,QAAQ,EAAE,CAAC;AACTC,UAAAA,WAAW,EAAE,IADJ;AAETC,UAAAA,WAAW,EAAE,WAFJ;AAGTC,UAAAA,MAAM,EAAE,KAHC;AAITC,UAAAA,oBAAoB,EAAE;AACpBC,YAAAA,SAAS,EAAEZ,QAAQ,CAACD,qBAAqB,CAACG,IAAD,CAAtB,CAAR,GAAwC,CAACH,qBAAqB,CAACG,IAAD,CAAtB,CAAxC,GAAwEH,qBAAqB,CAACG,IAAD;AADpF;AAJb,SAAD;AAFE,OAFT;AAaLW,MAAAA,UAAU,EAAE,CAAC;AACXV,QAAAA,SAAS,EAAEA,SADA;AAEXW,QAAAA,IAAI,EAAE;AAFK,OAAD,CAbP;AAiBLC,MAAAA,KAAK,EAAE,eAAeC,MAAf,CAAsBb,SAAtB;AAjBF,KAAP;AAmBD,GApBD,MAoBO;AACL,WAAO;AACLC,MAAAA,aAAa,EAAE,SADV;AAELC,MAAAA,YAAY,EAAE;AACZC,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,QAAQ,EAAE,CAAC;AACTC,UAAAA,WAAW,EAAE,IADJ;AAETC,UAAAA,WAAW,EAAE,UAFJ;AAGTC,UAAAA,MAAM,EAAE;AAHC,SAAD;AAFE,OAFT;AAULG,MAAAA,UAAU,EAAE,CAAC;AACXV,QAAAA,SAAS,EAAEA,SADA;AAEXW,QAAAA,IAAI,EAAE;AAFK,OAAD,CAVP;AAcLC,MAAAA,KAAK,EAAE;AAdF,KAAP;AAgBD;AACF","sourcesContent":["import _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";\nimport { isString } from '../../../utils/lang';\nexport default function parseCondition(data) {\n  var treatment = data.treatment;\n\n  if (_keysInstanceProperty(data)) {\n    return {\n      conditionType: 'WHITELIST',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'WHITELIST',\n          negate: false,\n          whitelistMatcherData: {\n            whitelist: isString(_keysInstanceProperty(data)) ? [_keysInstanceProperty(data)] : _keysInstanceProperty(data)\n          }\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: \"whitelisted \".concat(treatment)\n    };\n  } else {\n    return {\n      conditionType: 'ROLLOUT',\n      matcherGroup: {\n        combiner: 'AND',\n        matchers: [{\n          keySelector: null,\n          matcherType: 'ALL_KEYS',\n          negate: false\n        }]\n      },\n      partitions: [{\n        treatment: treatment,\n        size: 100\n      }],\n      label: 'default rule'\n    };\n  }\n}"]},"metadata":{},"sourceType":"module"}