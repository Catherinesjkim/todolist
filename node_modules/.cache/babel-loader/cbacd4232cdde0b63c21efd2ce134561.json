{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport { isObject, shallowClone, isString, isFinite, isBoolean } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('', {\n  displayAllErrors: true\n});\nvar ECMA_SIZES = {\n  NULL: 0,\n  // While on the JSON it's going to occupy more space, we'll take it as 0 for the approximation.\n  STRING: 2,\n  BOOLEAN: 4,\n  NUMBER: 8\n};\nvar MAX_PROPERTIES_AMOUNT = 300;\nvar MAX_PROPERTIES_SIZE = 1024 * 32;\nvar BASE_EVENT_SIZE = 1024; // We assume 1kb events without properties (avg measured)\n\nexport function validateEventProperties(maybeProperties, method) {\n  if (maybeProperties == undefined) return {\n    properties: null,\n    size: BASE_EVENT_SIZE\n  }; // eslint-disable-line eqeqeq\n\n  if (!isObject(maybeProperties)) {\n    log.error(\"\".concat(method, \": properties must be a plain object.\"));\n    return {\n      properties: false,\n      size: BASE_EVENT_SIZE\n    };\n  }\n\n  var keys = _Object$keys(maybeProperties);\n\n  var clone = shallowClone(maybeProperties); // To avoid calculating the size twice we'll return it from here.\n\n  var output = {\n    properties: clone,\n    size: BASE_EVENT_SIZE // We assume 1kb events without properties (avg measured)\n\n  };\n\n  if (keys.length > MAX_PROPERTIES_AMOUNT) {\n    log.warn(\"\".concat(method, \": Event has more than 300 properties. Some of them will be trimmed when processed.\"));\n  }\n\n  for (var i = 0; i < keys.length; i++) {\n    output.size += keys[i].length * ECMA_SIZES.STRING; // Count the size of the key which is always a string.\n\n    var val = clone[keys[i]];\n    var isStringVal = isString(val);\n    var isFiniteVal = isFinite(val);\n    var isBoolVal = isBoolean(val);\n    var isNullVal = val === null;\n\n    if (!(isStringVal || isFiniteVal || isBoolVal || isNullVal)) {\n      var _context; // If it's not of valid type.\n\n\n      clone[keys[i]] = null;\n      val = null;\n      isNullVal = true;\n      log.warn(_concatInstanceProperty(_context = \"\".concat(method, \": Property \")).call(_context, keys[i], \" is of invalid type. Setting value to null.\"));\n    }\n\n    if (isNullVal) output.size += ECMA_SIZES.NULL;else if (isFiniteVal) output.size += ECMA_SIZES.NUMBER;else if (isBoolVal) output.size += ECMA_SIZES.BOOLEAN;else if (isStringVal) output.size += val.length * ECMA_SIZES.STRING;\n\n    if (output.size > MAX_PROPERTIES_SIZE) {\n      log.error(\"\".concat(method, \": The maximum size allowed for the properties is 32768 bytes, which was exceeded. Event not queued.\"));\n      output.properties = false;\n      break;\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/utils/inputValidation/eventProperties.js"],"names":["_concatInstanceProperty","_Object$keys","isObject","shallowClone","isString","isFinite","isBoolean","logFactory","log","displayAllErrors","ECMA_SIZES","NULL","STRING","BOOLEAN","NUMBER","MAX_PROPERTIES_AMOUNT","MAX_PROPERTIES_SIZE","BASE_EVENT_SIZE","validateEventProperties","maybeProperties","method","undefined","properties","size","error","concat","keys","clone","output","length","warn","i","val","isStringVal","isFiniteVal","isBoolVal","isNullVal","_context","call"],"mappings":"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","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport { isObject, shallowClone, isString, isFinite, isBoolean } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('', {\n  displayAllErrors: true\n});\nvar ECMA_SIZES = {\n  NULL: 0,\n  // While on the JSON it's going to occupy more space, we'll take it as 0 for the approximation.\n  STRING: 2,\n  BOOLEAN: 4,\n  NUMBER: 8\n};\nvar MAX_PROPERTIES_AMOUNT = 300;\nvar MAX_PROPERTIES_SIZE = 1024 * 32;\nvar BASE_EVENT_SIZE = 1024; // We assume 1kb events without properties (avg measured)\n\nexport function validateEventProperties(maybeProperties, method) {\n  if (maybeProperties == undefined) return {\n    properties: null,\n    size: BASE_EVENT_SIZE\n  }; // eslint-disable-line eqeqeq\n\n  if (!isObject(maybeProperties)) {\n    log.error(\"\".concat(method, \": properties must be a plain object.\"));\n    return {\n      properties: false,\n      size: BASE_EVENT_SIZE\n    };\n  }\n\n  var keys = _Object$keys(maybeProperties);\n\n  var clone = shallowClone(maybeProperties); // To avoid calculating the size twice we'll return it from here.\n\n  var output = {\n    properties: clone,\n    size: BASE_EVENT_SIZE // We assume 1kb events without properties (avg measured)\n\n  };\n\n  if (keys.length > MAX_PROPERTIES_AMOUNT) {\n    log.warn(\"\".concat(method, \": Event has more than 300 properties. Some of them will be trimmed when processed.\"));\n  }\n\n  for (var i = 0; i < keys.length; i++) {\n    output.size += keys[i].length * ECMA_SIZES.STRING; // Count the size of the key which is always a string.\n\n    var val = clone[keys[i]];\n    var isStringVal = isString(val);\n    var isFiniteVal = isFinite(val);\n    var isBoolVal = isBoolean(val);\n    var isNullVal = val === null;\n\n    if (!(isStringVal || isFiniteVal || isBoolVal || isNullVal)) {\n      var _context;\n\n      // If it's not of valid type.\n      clone[keys[i]] = null;\n      val = null;\n      isNullVal = true;\n      log.warn(_concatInstanceProperty(_context = \"\".concat(method, \": Property \")).call(_context, keys[i], \" is of invalid type. Setting value to null.\"));\n    }\n\n    if (isNullVal) output.size += ECMA_SIZES.NULL;else if (isFiniteVal) output.size += ECMA_SIZES.NUMBER;else if (isBoolVal) output.size += ECMA_SIZES.BOOLEAN;else if (isStringVal) output.size += val.length * ECMA_SIZES.STRING;\n\n    if (output.size > MAX_PROPERTIES_SIZE) {\n      log.error(\"\".concat(method, \": The maximum size allowed for the properties is 32768 bytes, which was exceeded. Event not queued.\"));\n      output.properties = false;\n      break;\n    }\n  }\n\n  return output;\n}"]},"metadata":{},"sourceType":"module"}