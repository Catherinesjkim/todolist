{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport { isString } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('', {\n  displayAllErrors: true\n});\nvar EVENT_TYPE_REGEX = /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/;\nexport function validateEvent(maybeEvent, method) {\n  if (maybeEvent == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined event_type, event_type must be a non-empty string.\"));\n  } else if (!isString(maybeEvent)) {\n    log.error(\"\".concat(method, \": you passed an invalid event_type, event_type must be a non-empty string.\"));\n  } else {\n    // It is a string.\n    if (maybeEvent.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty event_type, event_type must be a non-empty string.\"));\n    } else if (!EVENT_TYPE_REGEX.test(maybeEvent)) {\n      var _context;\n\n      log.error(_concatInstanceProperty(_context = \"\".concat(method, \": you passed \\\"\")).call(_context, maybeEvent, \"\\\", event_type must adhere to the regular expression /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/g. This means an event_type must be alphanumeric, cannot be more than 80 characters long, and can only include a dash, underscore, period, or colon as separators of alphanumeric characters.\"));\n    } else {\n      return maybeEvent;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/utils/inputValidation/event.js"],"names":["_concatInstanceProperty","isString","logFactory","log","displayAllErrors","EVENT_TYPE_REGEX","validateEvent","maybeEvent","method","undefined","error","concat","length","test","_context","call"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,EAAD,EAAK;AACvBE,EAAAA,gBAAgB,EAAE;AADK,CAAL,CAApB;AAGA,IAAIC,gBAAgB,GAAG,oCAAvB;AACA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,MAAnC,EAA2C;AAChD,MAAID,UAAU,IAAIE,SAAlB,EAA6B;AAC3B;AACAN,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,qFAAlB,CAAV;AACD,GAHD,MAGO,IAAI,CAACP,QAAQ,CAACM,UAAD,CAAb,EAA2B;AAChCJ,IAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,4EAAlB,CAAV;AACD,GAFM,MAEA;AACL;AACA,QAAID,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;AAC3BT,MAAAA,GAAG,CAACO,KAAJ,CAAU,GAAGC,MAAH,CAAUH,MAAV,EAAkB,0EAAlB,CAAV;AACD,KAFD,MAEO,IAAI,CAACH,gBAAgB,CAACQ,IAAjB,CAAsBN,UAAtB,CAAL,EAAwC;AAC7C,UAAIO,QAAJ;;AAEAX,MAAAA,GAAG,CAACO,KAAJ,CAAUV,uBAAuB,CAACc,QAAQ,GAAG,GAAGH,MAAH,CAAUH,MAAV,EAAkB,iBAAlB,CAAZ,CAAvB,CAAyEO,IAAzE,CAA8ED,QAA9E,EAAwFP,UAAxF,EAAoG,wRAApG,CAAV;AACD,KAJM,MAIA;AACL,aAAOA,UAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport { isString } from '../lang';\nimport logFactory from '../logger';\nvar log = logFactory('', {\n  displayAllErrors: true\n});\nvar EVENT_TYPE_REGEX = /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/;\nexport function validateEvent(maybeEvent, method) {\n  if (maybeEvent == undefined) {\n    // eslint-disable-line eqeqeq\n    log.error(\"\".concat(method, \": you passed a null or undefined event_type, event_type must be a non-empty string.\"));\n  } else if (!isString(maybeEvent)) {\n    log.error(\"\".concat(method, \": you passed an invalid event_type, event_type must be a non-empty string.\"));\n  } else {\n    // It is a string.\n    if (maybeEvent.length === 0) {\n      log.error(\"\".concat(method, \": you passed an empty event_type, event_type must be a non-empty string.\"));\n    } else if (!EVENT_TYPE_REGEX.test(maybeEvent)) {\n      var _context;\n\n      log.error(_concatInstanceProperty(_context = \"\".concat(method, \": you passed \\\"\")).call(_context, maybeEvent, \"\\\", event_type must adhere to the regular expression /^[a-zA-Z0-9][-_.:a-zA-Z0-9]{0,79}$/g. This means an event_type must be alphanumeric, cannot be more than 80 characters long, and can only include a dash, underscore, period, or colon as separators of alphanumeric characters.\"));\n    } else {\n      return maybeEvent;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}