{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport logFactory from '../../utils/logger';\nimport { SplitError } from '../../utils/lang/Errors';\nvar log = logFactory('splitio-producer:my-segments');\nimport mySegmentsFetcher from '../fetcher/MySegments';\n\nfunction MySegmentsUpdaterFactory(context) {\n  var _context$getAll = context.getAll(),\n      settings = _context$getAll[context.constants.SETTINGS],\n      readiness = _context$getAll[context.constants.READINESS],\n      storage = _context$getAll[context.constants.STORAGE],\n      metricCollectors = _context$getAll[context.constants.COLLECTORS];\n\n  var segmentsEventEmitter = readiness.segments;\n  var readyOnAlreadyExistentState = true;\n  var startingUp = true;\n  return function MySegmentsUpdater() {\n    var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0; // NOTE: We only collect metrics on startup.\n\n    return mySegmentsFetcher(settings, startingUp, metricCollectors).then(function (segments) {\n      // Only when we have downloaded segments completely, we should not keep\n      // retrying anymore\n      startingUp = false; // Update the list of segment names available\n\n      var shouldNotifyUpdate = storage.segments.resetSegments(segments); // Notify update if required\n\n      if (storage.splits.usesSegments() && (shouldNotifyUpdate || readyOnAlreadyExistentState)) {\n        readyOnAlreadyExistentState = false;\n        segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);\n      }\n    })[\"catch\"](function (error) {\n      if (!(error instanceof SplitError)) _setTimeout(function () {\n        throw error;\n      }, 0);\n\n      if (startingUp && settings.startup.retriesOnFailureBeforeReady > retry) {\n        var _context;\n\n        retry += 1;\n        log.warn(_concatInstanceProperty(_context = \"Retrying download of segments #\".concat(retry, \". Reason: \")).call(_context, error));\n        return MySegmentsUpdater(retry);\n      } else {\n        startingUp = false;\n      }\n\n      return false; // shouldUpdate = false\n    });\n  };\n}\n\nexport default MySegmentsUpdaterFactory;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/producer/updater/MySegments.js"],"names":["_concatInstanceProperty","_setTimeout","logFactory","SplitError","log","mySegmentsFetcher","MySegmentsUpdaterFactory","context","_context$getAll","getAll","settings","constants","SETTINGS","readiness","READINESS","storage","STORAGE","metricCollectors","COLLECTORS","segmentsEventEmitter","segments","readyOnAlreadyExistentState","startingUp","MySegmentsUpdater","retry","arguments","length","undefined","then","shouldNotifyUpdate","resetSegments","splits","usesSegments","emit","SDK_SEGMENTS_ARRIVED","error","startup","retriesOnFailureBeforeReady","_context","warn","concat","call"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AACA,OAAOC,WAAP,MAAwB,mDAAxB;AAEA;;;;;;;;;;;;;;;;AAeA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,IAAIC,GAAG,GAAGF,UAAU,CAAC,8BAAD,CAApB;AACA,OAAOG,iBAAP,MAA8B,uBAA9B;;AAEA,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AACzC,MAAIC,eAAe,GAAGD,OAAO,CAACE,MAAR,EAAtB;AAAA,MACIC,QAAQ,GAAGF,eAAe,CAACD,OAAO,CAACI,SAAR,CAAkBC,QAAnB,CAD9B;AAAA,MAEIC,SAAS,GAAGL,eAAe,CAACD,OAAO,CAACI,SAAR,CAAkBG,SAAnB,CAF/B;AAAA,MAGIC,OAAO,GAAGP,eAAe,CAACD,OAAO,CAACI,SAAR,CAAkBK,OAAnB,CAH7B;AAAA,MAIIC,gBAAgB,GAAGT,eAAe,CAACD,OAAO,CAACI,SAAR,CAAkBO,UAAnB,CAJtC;;AAMA,MAAIC,oBAAoB,GAAGN,SAAS,CAACO,QAArC;AACA,MAAIC,2BAA2B,GAAG,IAAlC;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,SAAO,SAASC,iBAAT,GAA6B;AAClC,QAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAhF,CADkC,CAElC;;AACA,WAAOpB,iBAAiB,CAACK,QAAD,EAAWY,UAAX,EAAuBL,gBAAvB,CAAjB,CAA0DW,IAA1D,CAA+D,UAAUR,QAAV,EAAoB;AACxF;AACA;AACAE,MAAAA,UAAU,GAAG,KAAb,CAHwF,CAGpE;;AAEpB,UAAIO,kBAAkB,GAAGd,OAAO,CAACK,QAAR,CAAiBU,aAAjB,CAA+BV,QAA/B,CAAzB,CALwF,CAKrB;;AAEnE,UAAIL,OAAO,CAACgB,MAAR,CAAeC,YAAf,OAAkCH,kBAAkB,IAAIR,2BAAxD,CAAJ,EAA0F;AACxFA,QAAAA,2BAA2B,GAAG,KAA9B;AACAF,QAAAA,oBAAoB,CAACc,IAArB,CAA0Bd,oBAAoB,CAACe,oBAA/C;AACD;AACF,KAXM,EAWJ,OAXI,EAWK,UAAUC,KAAV,EAAiB;AAC3B,UAAI,EAAEA,KAAK,YAAYhC,UAAnB,CAAJ,EAAoCF,WAAW,CAAC,YAAY;AAC1D,cAAMkC,KAAN;AACD,OAF8C,EAE5C,CAF4C,CAAX;;AAIpC,UAAIb,UAAU,IAAIZ,QAAQ,CAAC0B,OAAT,CAAiBC,2BAAjB,GAA+Cb,KAAjE,EAAwE;AACtE,YAAIc,QAAJ;;AAEAd,QAAAA,KAAK,IAAI,CAAT;AACApB,QAAAA,GAAG,CAACmC,IAAJ,CAASvC,uBAAuB,CAACsC,QAAQ,GAAG,kCAAkCE,MAAlC,CAAyChB,KAAzC,EAAgD,YAAhD,CAAZ,CAAvB,CAAkGiB,IAAlG,CAAuGH,QAAvG,EAAiHH,KAAjH,CAAT;AACA,eAAOZ,iBAAiB,CAACC,KAAD,CAAxB;AACD,OAND,MAMO;AACLF,QAAAA,UAAU,GAAG,KAAb;AACD;;AAED,aAAO,KAAP,CAf2B,CAeb;AACf,KA3BM,CAAP;AA4BD,GA/BD;AAgCD;;AAED,eAAehB,wBAAf","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nimport { SplitError } from '../../utils/lang/Errors';\nvar log = logFactory('splitio-producer:my-segments');\nimport mySegmentsFetcher from '../fetcher/MySegments';\n\nfunction MySegmentsUpdaterFactory(context) {\n  var _context$getAll = context.getAll(),\n      settings = _context$getAll[context.constants.SETTINGS],\n      readiness = _context$getAll[context.constants.READINESS],\n      storage = _context$getAll[context.constants.STORAGE],\n      metricCollectors = _context$getAll[context.constants.COLLECTORS];\n\n  var segmentsEventEmitter = readiness.segments;\n  var readyOnAlreadyExistentState = true;\n  var startingUp = true;\n  return function MySegmentsUpdater() {\n    var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    // NOTE: We only collect metrics on startup.\n    return mySegmentsFetcher(settings, startingUp, metricCollectors).then(function (segments) {\n      // Only when we have downloaded segments completely, we should not keep\n      // retrying anymore\n      startingUp = false; // Update the list of segment names available\n\n      var shouldNotifyUpdate = storage.segments.resetSegments(segments); // Notify update if required\n\n      if (storage.splits.usesSegments() && (shouldNotifyUpdate || readyOnAlreadyExistentState)) {\n        readyOnAlreadyExistentState = false;\n        segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);\n      }\n    })[\"catch\"](function (error) {\n      if (!(error instanceof SplitError)) _setTimeout(function () {\n        throw error;\n      }, 0);\n\n      if (startingUp && settings.startup.retriesOnFailureBeforeReady > retry) {\n        var _context;\n\n        retry += 1;\n        log.warn(_concatInstanceProperty(_context = \"Retrying download of segments #\".concat(retry, \". Reason: \")).call(_context, error));\n        return MySegmentsUpdater(retry);\n      } else {\n        startingUp = false;\n      }\n\n      return false; // shouldUpdate = false\n    });\n  };\n}\n\nexport default MySegmentsUpdaterFactory;"]},"metadata":{},"sourceType":"module"}