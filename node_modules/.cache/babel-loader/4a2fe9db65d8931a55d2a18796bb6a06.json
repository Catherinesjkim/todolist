{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\nimport _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport { findIndex } from '../../utils/lang';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine:combiner');\nimport thenable from '../../utils/promise/thenable';\nimport * as LabelsConstants from '../../utils/labels';\nimport { CONTROL } from '../../utils/constants';\n\nfunction unexpectedInputHandler() {\n  log.error('Invalid Split provided, no valid conditions found');\n  return {\n    treatment: CONTROL,\n    label: LabelsConstants.EXCEPTION\n  };\n}\n\nfunction computeTreatment(predicateResults) {\n  var len = predicateResults.length;\n\n  for (var i = 0; i < len; i++) {\n    var evaluation = predicateResults[i];\n\n    if (evaluation !== undefined) {\n      log.debug(\"Treatment found: \".concat(evaluation.treatment));\n      return evaluation;\n    }\n  }\n\n  log.debug('All predicates evaluated, no treatment found.');\n  return undefined;\n}\n\nfunction ifElseIfCombinerContext(predicates) {\n  function ifElseIfCombiner(key, seed, trafficAllocation, trafficAllocationSeed, attributes, algo, splitEvaluator) {\n    // In Async environments we are going to have async predicates. There is none way to know\n    // before hand so we need to evaluate all the predicates, verify for thenables, and finally,\n    // define how to return the treatment (wrap result into a Promise or not).\n    var predicateResults = _mapInstanceProperty(predicates).call(predicates, function (evaluator) {\n      return evaluator(key, seed, trafficAllocation, trafficAllocationSeed, splitEvaluator, attributes, algo);\n    }); // if we find a thenable\n\n\n    if (findIndex(predicateResults, thenable) !== -1) {\n      return _Promise.all(predicateResults).then(function (results) {\n        return computeTreatment(results);\n      });\n    }\n\n    return computeTreatment(predicateResults);\n  } // if there is none predicates, then there was an error in parsing phase\n\n\n  if (!_Array$isArray(predicates) || _Array$isArray(predicates) && predicates.length === 0) {\n    return unexpectedInputHandler;\n  } else {\n    return ifElseIfCombiner;\n  }\n}\n\nexport default ifElseIfCombinerContext;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/engine/combiners/ifelseif.js"],"names":["_Array$isArray","_Promise","_mapInstanceProperty","findIndex","logFactory","log","thenable","LabelsConstants","CONTROL","unexpectedInputHandler","error","treatment","label","EXCEPTION","computeTreatment","predicateResults","len","length","i","evaluation","undefined","debug","concat","ifElseIfCombinerContext","predicates","ifElseIfCombiner","key","seed","trafficAllocation","trafficAllocationSeed","attributes","algo","splitEvaluator","call","evaluator","all","then","results"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,sDAA3B;AACA,OAAOC,QAAP,MAAqB,+CAArB;AACA,OAAOC,oBAAP,MAAiC,oDAAjC;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,yBAAD,CAApB;AACA,OAAOE,QAAP,MAAqB,8BAArB;AACA,OAAO,KAAKC,eAAZ,MAAiC,oBAAjC;AACA,SAASC,OAAT,QAAwB,uBAAxB;;AAEA,SAASC,sBAAT,GAAkC;AAChCJ,EAAAA,GAAG,CAACK,KAAJ,CAAU,mDAAV;AACA,SAAO;AACLC,IAAAA,SAAS,EAAEH,OADN;AAELI,IAAAA,KAAK,EAAEL,eAAe,CAACM;AAFlB,GAAP;AAID;;AAED,SAASC,gBAAT,CAA0BC,gBAA1B,EAA4C;AAC1C,MAAIC,GAAG,GAAGD,gBAAgB,CAACE,MAA3B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,QAAIC,UAAU,GAAGJ,gBAAgB,CAACG,CAAD,CAAjC;;AAEA,QAAIC,UAAU,KAAKC,SAAnB,EAA8B;AAC5Bf,MAAAA,GAAG,CAACgB,KAAJ,CAAU,oBAAoBC,MAApB,CAA2BH,UAAU,CAACR,SAAtC,CAAV;AACA,aAAOQ,UAAP;AACD;AACF;;AAEDd,EAAAA,GAAG,CAACgB,KAAJ,CAAU,+CAAV;AACA,SAAOD,SAAP;AACD;;AAED,SAASG,uBAAT,CAAiCC,UAAjC,EAA6C;AAC3C,WAASC,gBAAT,CAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,iBAArC,EAAwDC,qBAAxD,EAA+EC,UAA/E,EAA2FC,IAA3F,EAAiGC,cAAjG,EAAiH;AAC/G;AACA;AACA;AACA,QAAIjB,gBAAgB,GAAGb,oBAAoB,CAACsB,UAAD,CAApB,CAAiCS,IAAjC,CAAsCT,UAAtC,EAAkD,UAAUU,SAAV,EAAqB;AAC5F,aAAOA,SAAS,CAACR,GAAD,EAAMC,IAAN,EAAYC,iBAAZ,EAA+BC,qBAA/B,EAAsDG,cAAtD,EAAsEF,UAAtE,EAAkFC,IAAlF,CAAhB;AACD,KAFsB,CAAvB,CAJ+G,CAM3G;;;AAGJ,QAAI5B,SAAS,CAACY,gBAAD,EAAmBT,QAAnB,CAAT,KAA0C,CAAC,CAA/C,EAAkD;AAChD,aAAOL,QAAQ,CAACkC,GAAT,CAAapB,gBAAb,EAA+BqB,IAA/B,CAAoC,UAAUC,OAAV,EAAmB;AAC5D,eAAOvB,gBAAgB,CAACuB,OAAD,CAAvB;AACD,OAFM,CAAP;AAGD;;AAED,WAAOvB,gBAAgB,CAACC,gBAAD,CAAvB;AACD,GAjB0C,CAiBzC;;;AAGF,MAAI,CAACf,cAAc,CAACwB,UAAD,CAAf,IAA+BxB,cAAc,CAACwB,UAAD,CAAd,IAA8BA,UAAU,CAACP,MAAX,KAAsB,CAAvF,EAA0F;AACxF,WAAOR,sBAAP;AACD,GAFD,MAEO;AACL,WAAOgB,gBAAP;AACD;AACF;;AAED,eAAeF,uBAAf","sourcesContent":["import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";\nimport _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport { findIndex } from '../../utils/lang';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-engine:combiner');\nimport thenable from '../../utils/promise/thenable';\nimport * as LabelsConstants from '../../utils/labels';\nimport { CONTROL } from '../../utils/constants';\n\nfunction unexpectedInputHandler() {\n  log.error('Invalid Split provided, no valid conditions found');\n  return {\n    treatment: CONTROL,\n    label: LabelsConstants.EXCEPTION\n  };\n}\n\nfunction computeTreatment(predicateResults) {\n  var len = predicateResults.length;\n\n  for (var i = 0; i < len; i++) {\n    var evaluation = predicateResults[i];\n\n    if (evaluation !== undefined) {\n      log.debug(\"Treatment found: \".concat(evaluation.treatment));\n      return evaluation;\n    }\n  }\n\n  log.debug('All predicates evaluated, no treatment found.');\n  return undefined;\n}\n\nfunction ifElseIfCombinerContext(predicates) {\n  function ifElseIfCombiner(key, seed, trafficAllocation, trafficAllocationSeed, attributes, algo, splitEvaluator) {\n    // In Async environments we are going to have async predicates. There is none way to know\n    // before hand so we need to evaluate all the predicates, verify for thenables, and finally,\n    // define how to return the treatment (wrap result into a Promise or not).\n    var predicateResults = _mapInstanceProperty(predicates).call(predicates, function (evaluator) {\n      return evaluator(key, seed, trafficAllocation, trafficAllocationSeed, splitEvaluator, attributes, algo);\n    }); // if we find a thenable\n\n\n    if (findIndex(predicateResults, thenable) !== -1) {\n      return _Promise.all(predicateResults).then(function (results) {\n        return computeTreatment(results);\n      });\n    }\n\n    return computeTreatment(predicateResults);\n  } // if there is none predicates, then there was an error in parsing phase\n\n\n  if (!_Array$isArray(predicates) || _Array$isArray(predicates) && predicates.length === 0) {\n    return unexpectedInputHandler;\n  } else {\n    return ifElseIfCombiner;\n  }\n}\n\nexport default ifElseIfCombinerContext;"]},"metadata":{},"sourceType":"module"}