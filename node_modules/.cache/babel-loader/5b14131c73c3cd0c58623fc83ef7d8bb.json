{"ast":null,"code":"import useClient from './useClient';\nimport { getControlTreatmentsWithConfig } from './constants';\n/**\n * 'useTreatments' is a custom hook that returns a list of treatments.\n * It uses the 'useContext' hook to access the client from the Split context,\n * and invokes the 'getTreatmentsWithConfig' method.\n *\n * @return A TreatmentsWithConfig instance, that might contain control treatments if the client is not available or ready, or if split names do not exist.\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}\n */\n\nconst useTreatments = (splitNames, attributes, key) => {\n  const client = useClient(key);\n  return client ? client.getTreatmentsWithConfig(splitNames, attributes) : getControlTreatmentsWithConfig(splitNames);\n};\n\nexport default useTreatments;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio-react/es/useTreatments.js"],"names":["useClient","getControlTreatmentsWithConfig","useTreatments","splitNames","attributes","key","client","getTreatmentsWithConfig"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,8BAAT,QAA+C,aAA/C;AACA;;;;;;;;;AAQA,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,GAAzB,KAAiC;AACnD,QAAMC,MAAM,GAAGN,SAAS,CAACK,GAAD,CAAxB;AACA,SAAOC,MAAM,GACTA,MAAM,CAACC,uBAAP,CAA+BJ,UAA/B,EAA2CC,UAA3C,CADS,GAETH,8BAA8B,CAACE,UAAD,CAFlC;AAGH,CALD;;AAMA,eAAeD,aAAf","sourcesContent":["import useClient from './useClient';\nimport { getControlTreatmentsWithConfig } from './constants';\n/**\n * 'useTreatments' is a custom hook that returns a list of treatments.\n * It uses the 'useContext' hook to access the client from the Split context,\n * and invokes the 'getTreatmentsWithConfig' method.\n *\n * @return A TreatmentsWithConfig instance, that might contain control treatments if the client is not available or ready, or if split names do not exist.\n * @see {@link https://help.split.io/hc/en-us/articles/360020448791-JavaScript-SDK#get-treatments-with-configurations}\n */\nconst useTreatments = (splitNames, attributes, key) => {\n    const client = useClient(key);\n    return client ?\n        client.getTreatmentsWithConfig(splitNames, attributes) :\n        getControlTreatmentsWithConfig(splitNames);\n};\nexport default useTreatments;\n"]},"metadata":{},"sourceType":"module"}