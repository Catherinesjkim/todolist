{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport axios from 'axios';\nimport { SplitNetworkError } from '../../utils/lang/Errors';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-services:service');\n\nvar _axiosInstance = axios.create();\n\nexport default function Fetcher(request) {\n  return _axiosInstance.request(request)[\"catch\"](function (error) {\n    var _context, _context2;\n\n    var resp = error.response;\n    var url = error.config ? error.config.url : 'unknown';\n    var msg = '';\n\n    if (resp) {\n      // An HTTP error\n      switch (resp.status) {\n        case 404:\n          msg = 'Invalid API key or resource not found.';\n          break;\n\n        default:\n          msg = resp.statusText;\n          break;\n      }\n    } else {\n      // Something else, either an error making the request or a Network error.\n      msg = error.message;\n    }\n\n    if (!resp || resp.status !== 403) // 403's log we'll be handled somewhere else.\n      log.error(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = \"Response status is not OK. Status: \".concat(resp ? resp.status : 'NO_STATUS', \". URL: \")).call(_context2, url, \". Message: \")).call(_context, msg));\n    throw new SplitNetworkError(msg, resp ? resp.status : 'NO_STATUS');\n  });\n} // This function is only exposed for unit testing purposses.\n\nexport function __getAxiosInstance() {\n  return _axiosInstance;\n}","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/services/transport/index.js"],"names":["_concatInstanceProperty","axios","SplitNetworkError","logFactory","log","_axiosInstance","create","Fetcher","request","error","_context","_context2","resp","response","url","config","msg","status","statusText","message","concat","call","__getAxiosInstance"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,IAAIC,GAAG,GAAGD,UAAU,CAAC,0BAAD,CAApB;;AAEA,IAAIE,cAAc,GAAGJ,KAAK,CAACK,MAAN,EAArB;;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACvC,SAAOH,cAAc,CAACG,OAAf,CAAuBA,OAAvB,EAAgC,OAAhC,EAAyC,UAAUC,KAAV,EAAiB;AAC/D,QAAIC,QAAJ,EAAcC,SAAd;;AAEA,QAAIC,IAAI,GAAGH,KAAK,CAACI,QAAjB;AACA,QAAIC,GAAG,GAAGL,KAAK,CAACM,MAAN,GAAeN,KAAK,CAACM,MAAN,CAAaD,GAA5B,GAAkC,SAA5C;AACA,QAAIE,GAAG,GAAG,EAAV;;AAEA,QAAIJ,IAAJ,EAAU;AACR;AACA,cAAQA,IAAI,CAACK,MAAb;AACE,aAAK,GAAL;AACED,UAAAA,GAAG,GAAG,wCAAN;AACA;;AAEF;AACEA,UAAAA,GAAG,GAAGJ,IAAI,CAACM,UAAX;AACA;AAPJ;AASD,KAXD,MAWO;AACL;AACAF,MAAAA,GAAG,GAAGP,KAAK,CAACU,OAAZ;AACD;;AAED,QAAI,CAACP,IAAD,IAASA,IAAI,CAACK,MAAL,KAAgB,GAA7B,EAAkC;AAChCb,MAAAA,GAAG,CAACK,KAAJ,CAAUT,uBAAuB,CAACU,QAAQ,GAAGV,uBAAuB,CAACW,SAAS,GAAG,sCAAsCS,MAAtC,CAA6CR,IAAI,GAAGA,IAAI,CAACK,MAAR,GAAiB,WAAlE,EAA+E,SAA/E,CAAb,CAAvB,CAA+HI,IAA/H,CAAoIV,SAApI,EAA+IG,GAA/I,EAAoJ,aAApJ,CAAZ,CAAvB,CAAuMO,IAAvM,CAA4MX,QAA5M,EAAsNM,GAAtN,CAAV;AACF,UAAM,IAAId,iBAAJ,CAAsBc,GAAtB,EAA2BJ,IAAI,GAAGA,IAAI,CAACK,MAAR,GAAiB,WAAhD,CAAN;AACD,GA1BM,CAAP;AA2BD,C,CAAC;;AAEF,OAAO,SAASK,kBAAT,GAA8B;AACnC,SAAOjB,cAAP;AACD","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport axios from 'axios';\nimport { SplitNetworkError } from '../../utils/lang/Errors';\nimport logFactory from '../../utils/logger';\nvar log = logFactory('splitio-services:service');\n\nvar _axiosInstance = axios.create();\n\nexport default function Fetcher(request) {\n  return _axiosInstance.request(request)[\"catch\"](function (error) {\n    var _context, _context2;\n\n    var resp = error.response;\n    var url = error.config ? error.config.url : 'unknown';\n    var msg = '';\n\n    if (resp) {\n      // An HTTP error\n      switch (resp.status) {\n        case 404:\n          msg = 'Invalid API key or resource not found.';\n          break;\n\n        default:\n          msg = resp.statusText;\n          break;\n      }\n    } else {\n      // Something else, either an error making the request or a Network error.\n      msg = error.message;\n    }\n\n    if (!resp || resp.status !== 403) // 403's log we'll be handled somewhere else.\n      log.error(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = \"Response status is not OK. Status: \".concat(resp ? resp.status : 'NO_STATUS', \". URL: \")).call(_context2, url, \". Message: \")).call(_context, msg));\n    throw new SplitNetworkError(msg, resp ? resp.status : 'NO_STATUS');\n  });\n} // This function is only exposed for unit testing purposses.\n\nexport function __getAxiosInstance() {\n  return _axiosInstance;\n}"]},"metadata":{},"sourceType":"module"}