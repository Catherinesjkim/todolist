{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs3/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs3/helpers/esm/asyncToGenerator\";\nimport _Object$create from \"@babel/runtime-corejs3/core-js-stable/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";\nimport ClientFactory from '../client';\nimport OfflineProducerFactory from '../producer/offline';\nimport { releaseApiKey } from '../utils/inputValidation'; //\n// Create SDK instance for offline mode.\n//\n\nfunction SplitFactoryOffline(context, sharedTrackers) {\n  var sharedInstance = !sharedTrackers;\n  var readiness = context.get(context.constants.READINESS);\n  var storage = context.get(context.constants.STORAGE);\n  var statusManager = context.get(context.constants.STATUS_MANAGER); // Producer\n\n  var producer = sharedInstance ? undefined : OfflineProducerFactory(context); // Start background task for flag updates\n\n  producer && producer.start();\n\n  var api = _Object$assign( // Proto linkage of the EventEmitter to prevent any change\n  _Object$create(statusManager), // GetTreatment/s\n  ClientFactory(context), // Utilities\n  {\n    // Destroy instance. Async so we respect the online api.\n    destroy: function () {\n      var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Stop background jobs\n                producer && producer.stop(); // Cleanup event listeners\n\n                readiness.destroy(); // Cleanup storage\n\n                storage.destroy && storage.destroy(); // Mark the factory as destroyed.\n\n                context.put(context.constants.DESTROYED, true);\n                !sharedInstance && releaseApiKey();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n\n      return destroy;\n    }()\n  });\n\n  return {\n    api: api,\n    metricCollectors: false // We won't collect any metrics on localhost mode.\n\n  };\n}\n\nexport default SplitFactoryOffline;","map":{"version":3,"sources":["/Users/talianassi/node_modules/@splitsoftware/splitio/es/factory/offline.js"],"names":["_regeneratorRuntime","_asyncToGenerator","_Object$create","_Object$assign","ClientFactory","OfflineProducerFactory","releaseApiKey","SplitFactoryOffline","context","sharedTrackers","sharedInstance","readiness","get","constants","READINESS","storage","STORAGE","statusManager","STATUS_MANAGER","producer","undefined","start","api","destroy","_destroy","mark","_callee","wrap","_callee$","_context","prev","next","stop","put","DESTROYED","apply","arguments","metricCollectors"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,iBAAP,MAA8B,qDAA9B;AACA,OAAOC,cAAP,MAA2B,qDAA3B;AACA,OAAOC,cAAP,MAA2B,qDAA3B;AACA,OAAOC,aAAP,MAA0B,WAA1B;AACA,OAAOC,sBAAP,MAAmC,qBAAnC;AACA,SAASC,aAAT,QAA8B,0BAA9B,C,CAA0D;AAC1D;AACA;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,cAAtC,EAAsD;AACpD,MAAIC,cAAc,GAAG,CAACD,cAAtB;AACA,MAAIE,SAAS,GAAGH,OAAO,CAACI,GAAR,CAAYJ,OAAO,CAACK,SAAR,CAAkBC,SAA9B,CAAhB;AACA,MAAIC,OAAO,GAAGP,OAAO,CAACI,GAAR,CAAYJ,OAAO,CAACK,SAAR,CAAkBG,OAA9B,CAAd;AACA,MAAIC,aAAa,GAAGT,OAAO,CAACI,GAAR,CAAYJ,OAAO,CAACK,SAAR,CAAkBK,cAA9B,CAApB,CAJoD,CAIe;;AAEnE,MAAIC,QAAQ,GAAGT,cAAc,GAAGU,SAAH,GAAef,sBAAsB,CAACG,OAAD,CAAlE,CANoD,CAMyB;;AAE7EW,EAAAA,QAAQ,IAAIA,QAAQ,CAACE,KAAT,EAAZ;;AAEA,MAAIC,GAAG,GAAGnB,cAAc,EAAE;AAC1BD,EAAAA,cAAc,CAACe,aAAD,CADU,EACO;AAC/Bb,EAAAA,aAAa,CAACI,OAAD,CAFW,EAEA;AACxB;AACE;AACAe,IAAAA,OAAO,EAAE,YAAY;AACnB,UAAIC,QAAQ,GAAGvB,iBAAiB,EAChC,aACAD,mBAAmB,CAACyB,IAApB,CAAyB,SAASC,OAAT,GAAmB;AAC1C,eAAO1B,mBAAmB,CAAC2B,IAApB,CAAyB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1D,iBAAO,CAAP,EAAU;AACR,oBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,mBAAK,CAAL;AACE;AACAZ,gBAAAA,QAAQ,IAAIA,QAAQ,CAACa,IAAT,EAAZ,CAFF,CAE+B;;AAE7BrB,gBAAAA,SAAS,CAACY,OAAV,GAJF,CAIuB;;AAErBR,gBAAAA,OAAO,CAACQ,OAAR,IAAmBR,OAAO,CAACQ,OAAR,EAAnB,CANF,CAMwC;;AAEtCf,gBAAAA,OAAO,CAACyB,GAAR,CAAYzB,OAAO,CAACK,SAAR,CAAkBqB,SAA9B,EAAyC,IAAzC;AACA,iBAACxB,cAAD,IAAmBJ,aAAa,EAAhC;;AAEF,mBAAK,CAAL;AACA,mBAAK,KAAL;AACE,uBAAOuB,QAAQ,CAACG,IAAT,EAAP;AAdJ;AAgBD;AACF,SAnBM,EAmBJN,OAnBI,CAAP;AAoBD,OArBD,CAFgC,CAAhC;;AAyBA,eAASH,OAAT,GAAmB;AACjB,eAAOC,QAAQ,CAACW,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD;;AAED,aAAOb,OAAP;AACD,KA/BQ;AAFX,GAHwB,CAAxB;;AAuCA,SAAO;AACLD,IAAAA,GAAG,EAAEA,GADA;AAELe,IAAAA,gBAAgB,EAAE,KAFb,CAEmB;;AAFnB,GAAP;AAKD;;AAED,eAAe9B,mBAAf","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime-corejs3/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs3/helpers/esm/asyncToGenerator\";\nimport _Object$create from \"@babel/runtime-corejs3/core-js-stable/object/create\";\nimport _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";\nimport ClientFactory from '../client';\nimport OfflineProducerFactory from '../producer/offline';\nimport { releaseApiKey } from '../utils/inputValidation'; //\n// Create SDK instance for offline mode.\n//\n\nfunction SplitFactoryOffline(context, sharedTrackers) {\n  var sharedInstance = !sharedTrackers;\n  var readiness = context.get(context.constants.READINESS);\n  var storage = context.get(context.constants.STORAGE);\n  var statusManager = context.get(context.constants.STATUS_MANAGER); // Producer\n\n  var producer = sharedInstance ? undefined : OfflineProducerFactory(context); // Start background task for flag updates\n\n  producer && producer.start();\n\n  var api = _Object$assign( // Proto linkage of the EventEmitter to prevent any change\n  _Object$create(statusManager), // GetTreatment/s\n  ClientFactory(context), // Utilities\n  {\n    // Destroy instance. Async so we respect the online api.\n    destroy: function () {\n      var _destroy = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Stop background jobs\n                producer && producer.stop(); // Cleanup event listeners\n\n                readiness.destroy(); // Cleanup storage\n\n                storage.destroy && storage.destroy(); // Mark the factory as destroyed.\n\n                context.put(context.constants.DESTROYED, true);\n                !sharedInstance && releaseApiKey();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n\n      return destroy;\n    }()\n  });\n\n  return {\n    api: api,\n    metricCollectors: false // We won't collect any metrics on localhost mode.\n\n  };\n}\n\nexport default SplitFactoryOffline;"]},"metadata":{},"sourceType":"module"}