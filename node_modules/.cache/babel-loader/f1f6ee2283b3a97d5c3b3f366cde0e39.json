{"ast":null,"code":"import { isObject, forOwn } from '../../../utils/lang';\nimport parseCondition from './parseCondition';\n\nfunction getConfigurationFromSettings(settings) {\n  var mockSettings = settings.features || {};\n  var splitObjects = {};\n  forOwn(mockSettings, function (data, splitName) {\n    var treatment = data;\n    var config = null;\n\n    if (isObject(data)) {\n      treatment = data.treatment;\n      config = data.config || config;\n    }\n\n    var configurations = {};\n    if (config !== null) configurations[treatment] = config;\n    splitObjects[splitName] = {\n      conditions: [parseCondition({\n        treatment: treatment\n      })],\n      configurations: configurations\n    };\n  });\n  return splitObjects;\n}\n\nexport default getConfigurationFromSettings;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/services/splitChanges/offline/browser.js"],"names":["isObject","forOwn","parseCondition","getConfigurationFromSettings","settings","mockSettings","features","splitObjects","data","splitName","treatment","config","configurations","conditions"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,qBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,4BAAT,CAAsCC,QAAtC,EAAgD;AAC9C,MAAIC,YAAY,GAAGD,QAAQ,CAACE,QAAT,IAAqB,EAAxC;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAN,EAAAA,MAAM,CAACI,YAAD,EAAe,UAAUG,IAAV,EAAgBC,SAAhB,EAA2B;AAC9C,QAAIC,SAAS,GAAGF,IAAhB;AACA,QAAIG,MAAM,GAAG,IAAb;;AAEA,QAAIX,QAAQ,CAACQ,IAAD,CAAZ,EAAoB;AAClBE,MAAAA,SAAS,GAAGF,IAAI,CAACE,SAAjB;AACAC,MAAAA,MAAM,GAAGH,IAAI,CAACG,MAAL,IAAeA,MAAxB;AACD;;AAED,QAAIC,cAAc,GAAG,EAArB;AACA,QAAID,MAAM,KAAK,IAAf,EAAqBC,cAAc,CAACF,SAAD,CAAd,GAA4BC,MAA5B;AACrBJ,IAAAA,YAAY,CAACE,SAAD,CAAZ,GAA0B;AACxBI,MAAAA,UAAU,EAAE,CAACX,cAAc,CAAC;AAC1BQ,QAAAA,SAAS,EAAEA;AADe,OAAD,CAAf,CADY;AAIxBE,MAAAA,cAAc,EAAEA;AAJQ,KAA1B;AAMD,GAjBK,CAAN;AAkBA,SAAOL,YAAP;AACD;;AAED,eAAeJ,4BAAf","sourcesContent":["import { isObject, forOwn } from '../../../utils/lang';\nimport parseCondition from './parseCondition';\n\nfunction getConfigurationFromSettings(settings) {\n  var mockSettings = settings.features || {};\n  var splitObjects = {};\n  forOwn(mockSettings, function (data, splitName) {\n    var treatment = data;\n    var config = null;\n\n    if (isObject(data)) {\n      treatment = data.treatment;\n      config = data.config || config;\n    }\n\n    var configurations = {};\n    if (config !== null) configurations[treatment] = config;\n    splitObjects[splitName] = {\n      conditions: [parseCondition({\n        treatment: treatment\n      })],\n      configurations: configurations\n    };\n  });\n  return splitObjects;\n}\n\nexport default getConfigurationFromSettings;"]},"metadata":{},"sourceType":"module"}