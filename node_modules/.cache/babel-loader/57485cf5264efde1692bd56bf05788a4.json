{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\n\nimport logFactory from '../../utils/logger';\nimport { findIndex } from '../../utils/lang';\nvar log = logFactory('splitio-engine:matcher');\n\nfunction partOfMatcherContext(ruleAttr\n/*: array */\n)\n/*: Function */\n{\n  return function partOfMatcher(runtimeAttr\n  /*: array */\n  )\n  /*: boolean */\n  {\n    var _context, _context2; // To be part of the length should be minor or equal.\n\n\n    var isPartOf = runtimeAttr.length <= ruleAttr.length;\n\n    var _loop = function _loop(i) {\n      // If the length says is possible, we iterate until we prove otherwise or we check all elements.\n      if (findIndex(ruleAttr, function (e) {\n        return e === runtimeAttr[i];\n      }) < 0) isPartOf = false;\n    };\n\n    for (var i = 0; i < runtimeAttr.length && isPartOf; i++) {\n      _loop(i);\n    }\n\n    log.debug(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = \"[partOfMatcher] \".concat(runtimeAttr, \" is part of \")).call(_context2, ruleAttr, \"? \")).call(_context, isPartOf));\n    return isPartOf;\n  };\n}\n\nexport default partOfMatcherContext;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/engine/matchers/part_of.js"],"names":["_concatInstanceProperty","logFactory","findIndex","log","partOfMatcherContext","ruleAttr","partOfMatcher","runtimeAttr","_context","_context2","isPartOf","length","_loop","i","e","debug","concat","call"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uDAApC;AAEA;;;;;;;;;;;;;;;;AAeA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,IAAIC,GAAG,GAAGF,UAAU,CAAC,wBAAD,CAApB;;AAEA,SAASG,oBAAT,CAA8BC;AAC9B;AADA;AAGA;AACA;AACE,SAAO,SAASC,aAAT,CAAuBC;AAC9B;AADO;AAGP;AACA;AACE,QAAIC,QAAJ,EAAcC,SAAd,CADF,CAGE;;;AACA,QAAIC,QAAQ,GAAGH,WAAW,CAACI,MAAZ,IAAsBN,QAAQ,CAACM,MAA9C;;AAEA,QAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,CAAf,EAAkB;AAC5B;AACA,UAAIX,SAAS,CAACG,QAAD,EAAW,UAAUS,CAAV,EAAa;AACnC,eAAOA,CAAC,KAAKP,WAAW,CAACM,CAAD,CAAxB;AACD,OAFY,CAAT,GAEC,CAFL,EAEQH,QAAQ,GAAG,KAAX;AACT,KALD;;AAOA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAAW,CAACI,MAAhB,IAA0BD,QAA1C,EAAoDG,CAAC,EAArD,EAAyD;AACvDD,MAAAA,KAAK,CAACC,CAAD,CAAL;AACD;;AAEDV,IAAAA,GAAG,CAACY,KAAJ,CAAUf,uBAAuB,CAACQ,QAAQ,GAAGR,uBAAuB,CAACS,SAAS,GAAG,mBAAmBO,MAAnB,CAA0BT,WAA1B,EAAuC,cAAvC,CAAb,CAAvB,CAA4FU,IAA5F,CAAiGR,SAAjG,EAA4GJ,QAA5G,EAAsH,IAAtH,CAAZ,CAAvB,CAAgKY,IAAhK,CAAqKT,QAArK,EAA+KE,QAA/K,CAAV;AACA,WAAOA,QAAP;AACD,GAvBD;AAwBD;;AAED,eAAeN,oBAAf","sourcesContent":["import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\n\n/**\nCopyright 2016 Split Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n**/\nimport logFactory from '../../utils/logger';\nimport { findIndex } from '../../utils/lang';\nvar log = logFactory('splitio-engine:matcher');\n\nfunction partOfMatcherContext(ruleAttr\n/*: array */\n)\n/*: Function */\n{\n  return function partOfMatcher(runtimeAttr\n  /*: array */\n  )\n  /*: boolean */\n  {\n    var _context, _context2;\n\n    // To be part of the length should be minor or equal.\n    var isPartOf = runtimeAttr.length <= ruleAttr.length;\n\n    var _loop = function _loop(i) {\n      // If the length says is possible, we iterate until we prove otherwise or we check all elements.\n      if (findIndex(ruleAttr, function (e) {\n        return e === runtimeAttr[i];\n      }) < 0) isPartOf = false;\n    };\n\n    for (var i = 0; i < runtimeAttr.length && isPartOf; i++) {\n      _loop(i);\n    }\n\n    log.debug(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = \"[partOfMatcher] \".concat(runtimeAttr, \" is part of \")).call(_context2, ruleAttr, \"? \")).call(_context, isPartOf));\n    return isPartOf;\n  };\n}\n\nexport default partOfMatcherContext;"]},"metadata":{},"sourceType":"module"}