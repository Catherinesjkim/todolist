{"ast":null,"code":"import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";\nimport _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs3/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs3/helpers/esm/createClass\";\nimport logFactory from '../../../utils/logger';\nvar log = logFactory('splitio-storage:localstorage');\nvar DEFINED = '1';\n\nvar SegmentCacheInLocalStorage = /*#__PURE__*/function () {\n  function SegmentCacheInLocalStorage(keys) {\n    _classCallCheck(this, SegmentCacheInLocalStorage);\n\n    this.keys = keys;\n  }\n\n  _createClass(SegmentCacheInLocalStorage, [{\n    key: \"addToSegment\",\n    value: function addToSegment(segmentName\n    /*, segmentKeys: Array<string>*/\n    ) {\n      var segmentKey = _keysInstanceProperty(this).buildSegmentNameKey(segmentName);\n\n      try {\n        localStorage.setItem(segmentKey, DEFINED);\n        return true;\n      } catch (e) {\n        log.error(e);\n        return false;\n      }\n    }\n  }, {\n    key: \"removeFromSegment\",\n    value: function removeFromSegment(segmentName\n    /*, segmentKeys: Array<string>*/\n    ) {\n      var segmentKey = _keysInstanceProperty(this).buildSegmentNameKey(segmentName);\n\n      try {\n        localStorage.removeItem(segmentKey);\n        return true;\n      } catch (e) {\n        log.error(e);\n        return false;\n      }\n    }\n  }, {\n    key: \"resetSegments\",\n    value: function resetSegments(segmentNames) {\n      var _context,\n          _this = this;\n\n      var isDiff = false;\n      var index; // Scan current values from localStorage\n\n      var storedSegmentNames = _reduceInstanceProperty(_context = _Object$keys(localStorage)).call(_context, function (accum, key) {\n        var segmentName = _keysInstanceProperty(_this).extractSegmentName(key);\n\n        if (segmentName) accum.push(segmentName);\n        return accum;\n      }, []); // Extreme fast => everything is empty\n\n\n      if (segmentNames.length === 0 && storedSegmentNames.length === segmentNames.length) return isDiff; // Quick path\n\n      if (storedSegmentNames.length !== segmentNames.length) {\n        isDiff = true;\n\n        _forEachInstanceProperty(storedSegmentNames).call(storedSegmentNames, function (segmentName) {\n          return _this.removeFromSegment(segmentName);\n        });\n\n        _forEachInstanceProperty(segmentNames).call(segmentNames, function (segmentName) {\n          return _this.addToSegment(segmentName);\n        });\n      } else {\n        // Slowest path => we need to find at least 1 difference because\n        for (index = 0; index < segmentNames.length && _indexOfInstanceProperty(storedSegmentNames).call(storedSegmentNames, segmentNames[index]) !== -1; index++) {// TODO: why empty statement?\n        }\n\n        if (index < segmentNames.length) {\n          isDiff = true;\n\n          _forEachInstanceProperty(storedSegmentNames).call(storedSegmentNames, function (segmentName) {\n            return _this.removeFromSegment(segmentName);\n          });\n\n          _forEachInstanceProperty(segmentNames).call(segmentNames, function (segmentName) {\n            return _this.addToSegment(segmentName);\n          });\n        }\n      }\n\n      return isDiff;\n    }\n  }, {\n    key: \"isInSegment\",\n    value: function isInSegment(segmentName\n    /*, key: string*/\n    ) {\n      return localStorage.getItem(_keysInstanceProperty(this).buildSegmentNameKey(segmentName)) === DEFINED;\n    }\n  }, {\n    key: \"setChangeNumber\",\n    value: function setChangeNumber()\n    /*segmentName: string, changeNumber: number*/\n    {\n      return true;\n    }\n  }, {\n    key: \"getChangeNumber\",\n    value: function getChangeNumber()\n    /*segmentName: string*/\n    {\n      return -1;\n    }\n  }, {\n    key: \"registerSegment\",\n    value: function registerSegment()\n    /*segment: string*/\n    {\n      return false;\n    }\n  }, {\n    key: \"registerSegments\",\n    value: function registerSegments()\n    /*segments: Iterable<string>*/\n    {\n      return false;\n    }\n  }, {\n    key: \"getRegisteredSegments\",\n    value: function getRegisteredSegments() {\n      return [];\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      log.info('Flushing localStorage');\n      localStorage.clear();\n    }\n  }]);\n\n  return SegmentCacheInLocalStorage;\n}();\n\nexport default SegmentCacheInLocalStorage;","map":{"version":3,"sources":["/Users/talianassi/Desktop/todolist/node_modules/@splitsoftware/splitio/es/storage/SegmentCache/InLocalStorage/index.js"],"names":["_indexOfInstanceProperty","_forEachInstanceProperty","_Object$keys","_reduceInstanceProperty","_keysInstanceProperty","_classCallCheck","_createClass","logFactory","log","DEFINED","SegmentCacheInLocalStorage","keys","key","value","addToSegment","segmentName","segmentKey","buildSegmentNameKey","localStorage","setItem","e","error","removeFromSegment","removeItem","resetSegments","segmentNames","_context","_this","isDiff","index","storedSegmentNames","call","accum","extractSegmentName","push","length","isInSegment","getItem","setChangeNumber","getChangeNumber","registerSegment","registerSegments","getRegisteredSegments","flush","info","clear"],"mappings":"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","sourcesContent":["import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";\nimport _keysInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs3/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs3/helpers/esm/createClass\";\nimport logFactory from '../../../utils/logger';\nvar log = logFactory('splitio-storage:localstorage');\nvar DEFINED = '1';\n\nvar SegmentCacheInLocalStorage =\n/*#__PURE__*/\nfunction () {\n  function SegmentCacheInLocalStorage(keys) {\n    _classCallCheck(this, SegmentCacheInLocalStorage);\n\n    this.keys = keys;\n  }\n\n  _createClass(SegmentCacheInLocalStorage, [{\n    key: \"addToSegment\",\n    value: function addToSegment(segmentName\n    /*, segmentKeys: Array<string>*/\n    ) {\n      var segmentKey = _keysInstanceProperty(this).buildSegmentNameKey(segmentName);\n\n      try {\n        localStorage.setItem(segmentKey, DEFINED);\n        return true;\n      } catch (e) {\n        log.error(e);\n        return false;\n      }\n    }\n  }, {\n    key: \"removeFromSegment\",\n    value: function removeFromSegment(segmentName\n    /*, segmentKeys: Array<string>*/\n    ) {\n      var segmentKey = _keysInstanceProperty(this).buildSegmentNameKey(segmentName);\n\n      try {\n        localStorage.removeItem(segmentKey);\n        return true;\n      } catch (e) {\n        log.error(e);\n        return false;\n      }\n    }\n  }, {\n    key: \"resetSegments\",\n    value: function resetSegments(segmentNames) {\n      var _context,\n          _this = this;\n\n      var isDiff = false;\n      var index; // Scan current values from localStorage\n\n      var storedSegmentNames = _reduceInstanceProperty(_context = _Object$keys(localStorage)).call(_context, function (accum, key) {\n        var segmentName = _keysInstanceProperty(_this).extractSegmentName(key);\n\n        if (segmentName) accum.push(segmentName);\n        return accum;\n      }, []); // Extreme fast => everything is empty\n\n\n      if (segmentNames.length === 0 && storedSegmentNames.length === segmentNames.length) return isDiff; // Quick path\n\n      if (storedSegmentNames.length !== segmentNames.length) {\n        isDiff = true;\n\n        _forEachInstanceProperty(storedSegmentNames).call(storedSegmentNames, function (segmentName) {\n          return _this.removeFromSegment(segmentName);\n        });\n\n        _forEachInstanceProperty(segmentNames).call(segmentNames, function (segmentName) {\n          return _this.addToSegment(segmentName);\n        });\n      } else {\n        // Slowest path => we need to find at least 1 difference because\n        for (index = 0; index < segmentNames.length && _indexOfInstanceProperty(storedSegmentNames).call(storedSegmentNames, segmentNames[index]) !== -1; index++) {// TODO: why empty statement?\n        }\n\n        if (index < segmentNames.length) {\n          isDiff = true;\n\n          _forEachInstanceProperty(storedSegmentNames).call(storedSegmentNames, function (segmentName) {\n            return _this.removeFromSegment(segmentName);\n          });\n\n          _forEachInstanceProperty(segmentNames).call(segmentNames, function (segmentName) {\n            return _this.addToSegment(segmentName);\n          });\n        }\n      }\n\n      return isDiff;\n    }\n  }, {\n    key: \"isInSegment\",\n    value: function isInSegment(segmentName\n    /*, key: string*/\n    ) {\n      return localStorage.getItem(_keysInstanceProperty(this).buildSegmentNameKey(segmentName)) === DEFINED;\n    }\n  }, {\n    key: \"setChangeNumber\",\n    value: function setChangeNumber()\n    /*segmentName: string, changeNumber: number*/\n    {\n      return true;\n    }\n  }, {\n    key: \"getChangeNumber\",\n    value: function getChangeNumber()\n    /*segmentName: string*/\n    {\n      return -1;\n    }\n  }, {\n    key: \"registerSegment\",\n    value: function registerSegment()\n    /*segment: string*/\n    {\n      return false;\n    }\n  }, {\n    key: \"registerSegments\",\n    value: function registerSegments()\n    /*segments: Iterable<string>*/\n    {\n      return false;\n    }\n  }, {\n    key: \"getRegisteredSegments\",\n    value: function getRegisteredSegments() {\n      return [];\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      log.info('Flushing localStorage');\n      localStorage.clear();\n    }\n  }]);\n\n  return SegmentCacheInLocalStorage;\n}();\n\nexport default SegmentCacheInLocalStorage;"]},"metadata":{},"sourceType":"module"}